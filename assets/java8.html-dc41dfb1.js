import{_ as a,W as n,X as s,Y as e}from"./framework-e28ace55.js";const t={},p=e(`<h1 id="java8函数式编程" tabindex="-1"><a class="header-anchor" href="#java8函数式编程" aria-hidden="true">#</a> Java8函数式编程</h1><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式" aria-hidden="true">#</a> Lambda表达式</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>Lambda表达式是Java8新增的特性；（语法糖）。可以对<strong>匿名内部类</strong>的写法进行简化。</p><p><strong>针对的是函数式接口（只有一个抽象方法的接口）</strong></p><p>不用关系是什么对象进行操作 而是关注对数据的操作</p><h3 id="核心原则" tabindex="-1"><a class="header-anchor" href="#核心原则" aria-hidden="true">#</a> 核心原则</h3><p>（参数类型）可推导 可省略</p><p>只关心参数和具体的操作</p><h3 id="基本格式" tabindex="-1"><a class="header-anchor" href="#基本格式" aria-hidden="true">#</a> 基本格式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>（参数列表） <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>代码操作<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="lambda表达式省略规则" tabindex="-1"><a class="header-anchor" href="#lambda表达式省略规则" aria-hidden="true">#</a> Lambda表达式省略规则</h3><ul><li>参数类型可以省略（可推导）</li><li>方法体只有一个return时 {} return ； 都可省略</li><li>方法只有一个参数时小括号可以省略</li></ul><h3 id="instance" tabindex="-1"><a class="header-anchor" href="#instance" aria-hidden="true">#</a> Instance</h3><p>可以先写匿名内部类的形式 再将代码修改成lambda表达式的形式 多多益善</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这里是实现Runnable接口的run方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">//--------------------------------------------------------------------------------------        </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这里是实现Runnable接口的run方法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用final的外层局部变量" tabindex="-1"><a class="header-anchor" href="#引用final的外层局部变量" aria-hidden="true">#</a> 引用final的外层局部变量</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230119224903766.png" alt="image-20230119224903766"></p><h2 id="stream流" tabindex="-1"><a class="header-anchor" href="#stream流" aria-hidden="true">#</a> Stream流</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><p>Java8中Stream使用的是函数式编程的模式；用来对集合或者数组进行链状流形式的操作。</p><p>便利我们对数组和集合的操作</p><pre><code>1 . 不是数据结构，不会保存数据。

2. 不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）

3. 惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。
</code></pre><h3 id="stream操作" tabindex="-1"><a class="header-anchor" href="#stream操作" aria-hidden="true">#</a> Stream操作</h3><p><strong>必须要有终结操作 中间操作的代码才会生效</strong></p><h4 id="创建stream" tabindex="-1"><a class="header-anchor" href="#创建stream" aria-hidden="true">#</a> 创建Stream</h4><p><strong><em>单列集合</em> <code>集合对象.stream()</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个单列集合</span>

<span class="token comment">//创建Stream</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>双列集合</em> 转换成两个单列集合后再创建</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Eddie&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Irving&quot;</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//转换成两个单列集合后再创建</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>数组</em> <code>Arrays.stream(arr) 或者 Stream.of(arr)</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="中间操作" tabindex="-1"><a class="header-anchor" href="#中间操作" aria-hidden="true">#</a> 中间操作</h4><h5 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h5><p>可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单列结合对象</span>

<span class="token comment">//打印age大于18的人员name</span>
users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token comment">//过滤操作进行条件判断 符合过滤条件的才能继续留在流中</span>
	 <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h5><p>对流中的数据元素进行计算或者转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;Eddie&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25345.1d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">2534515135153.1d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;Eddie&quot;</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">253442443415.1d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//类型进行转换</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>username <span class="token operator">-&gt;</span> <span class="token string">&quot;map进行数据操作\\t&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token comment">//进行数据的运算操作</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218160150972.png" alt="image-20221218160150972"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218161028779.png" alt="image-20221218161028779"></p><h5 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct" aria-hidden="true">#</a> distinct</h5><p>去重操作</p><p>distict是<strong>依赖Objec中的 equals() 方法来判断对象是否相同的</strong>。所有<strong>需要重写equals方法</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218161528780.png" alt="image-20221218161528780"></p><h5 id="sorted" tabindex="-1"><a class="header-anchor" href="#sorted" aria-hidden="true">#</a> sorted</h5><p>对流中的数据元素进行排序（空参的需要流中的数据元素可比较实现了@Comparable接口）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218162517544.png" alt="image-20221218162517544"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218163001012.png" alt="image-20221218163001012"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218163031865.png" alt="image-20221218163031865"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218163230537.png" alt="image-20221218163230537"></p><h5 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> limit</h5><p>设置流的最大长度（限制作用）超出的部分将被抛弃</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218163427418.png" alt="image-20221218163427418"></p><h5 id="skip" tabindex="-1"><a class="header-anchor" href="#skip" aria-hidden="true">#</a> skip</h5><p>跳过流中的前n个元素，返回剩下的(如果 n &gt;= 总元素 则返回null)</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218163702066.png" alt="image-20221218163702066"></p><h5 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap" aria-hidden="true">#</a> flatMap</h5><p>flatMap能够将一个对象<strong>转换成多个对象作为流的元素</strong>（一个转多个）</p><p>区别于map----map只能将一个对象转换成另一个对象来作为流的元素。（一个转一个）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218180854993.png" alt="image-20221218180854993"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218180959885.png" alt="image-20221218180959885"></p><h4 id="终结操作" tabindex="-1"><a class="header-anchor" href="#终结操作" aria-hidden="true">#</a> 终结操作</h4><p>使用Stream一定要使用终结操作；中间操作才会执行</p><h5 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h5><p>对流中的数据元素进行遍历操作 ；我们通过传入的参数去指定对遍历到的元素进行具体的（输出/运算输出）操作</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218181500008.png" alt="image-20221218181500008"></p><h5 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count</h5><p>（计数）获取当前流中的数据元素的个数</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218181840942.png" alt="image-20221218181840942"></p><h5 id="max-min" tabindex="-1"><a class="header-anchor" href="#max-min" aria-hidden="true">#</a> max&amp;min</h5><p>取最值（最大值&amp;最小值）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218192832728.png" alt="image-20221218192832728"></p><h5 id="collect" tabindex="-1"><a class="header-anchor" href="#collect" aria-hidden="true">#</a> collect</h5><p>把流中的数据元素转换成集合</p><p><strong>转换成List</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218193359736.png" alt="image-20221218193359736"></p><p><strong>转换成Set</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218193437073.png" alt="image-20221218193437073"></p><p><strong>转换成Map</strong></p><p>要指定 转换成key 转换成value 的规则</p><p>注意 转换成key的时候一定要确保<strong>key值不能重复</strong>（key值要去重）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218194729048.png" alt="image-20221218194729048"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218194430541.png" alt="image-20221218194430541"></p><h5 id="reduce归并" tabindex="-1"><a class="header-anchor" href="#reduce归并" aria-hidden="true">#</a> reduce归并</h5><p>对流中的数据按照指定的计算方式计算出一个结果（缩紧操作）</p><p>把stream中的元素组合起来，我们传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值的基础上进行计算，计算结果再和后面的元素进行计算。</p><p><strong>两个参数的重载方法</strong></p><p>自己指定初始化值以及运算逻辑</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218204325368.png" alt="image-20221218204325368"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218204108542.png" alt="image-20221218204108542"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218203330084.png" alt="image-20221218203330084"></p><p><strong>一个参数的重载方法</strong></p><p>拿stream中的第一个元素作为初始值 只需定义运算逻辑</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218205129738.png" alt="image-20221218205129738"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
     boolean foundAny = false;
     T result = null;
     for (T element : this stream) {
         if (!foundAny) {
             foundAny = true;
             result = element;
         }
         else
             result = accumulator.apply(result, element);
     }
     return foundAny ? Optional.of(result) : Optional.empty();
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>三个参数的重载方法</strong></p><h4 id="查找与匹配" tabindex="-1"><a class="header-anchor" href="#查找与匹配" aria-hidden="true">#</a> 查找与匹配</h4><h5 id="anymatch" tabindex="-1"><a class="header-anchor" href="#anymatch" aria-hidden="true">#</a> anyMatch</h5><p>是否有任意一个元素符合匹配条件（返回boolean类型）</p><h5 id="allmatch" tabindex="-1"><a class="header-anchor" href="#allmatch" aria-hidden="true">#</a> allMatch</h5><p>是否全部都符合匹配条件（返回boolean类型）</p><h5 id="nonematch" tabindex="-1"><a class="header-anchor" href="#nonematch" aria-hidden="true">#</a> noneMatch</h5><p>是否都不符合匹配条件 若都不符合返回true（返回boolean类型）</p><h5 id="findany" tabindex="-1"><a class="header-anchor" href="#findany" aria-hidden="true">#</a> findAny</h5><p>获取流中的任意一个元素（无法保证获取的是流中的第一个元素）</p><p>随机抽取一名幸运元素</p><h5 id="findfirst" tabindex="-1"><a class="header-anchor" href="#findfirst" aria-hidden="true">#</a> findFirst</h5><p>获取流中的第一个元素</p><h3 id="stream的注意事项" tabindex="-1"><a class="header-anchor" href="#stream的注意事项" aria-hidden="true">#</a> Stream的注意事项</h3><ol><li><p>不是数据结构，不会保存数据。（流是一次性的）</p></li><li><p>不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p></li><li><p>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p></li></ol><h2 id="optional" tabindex="-1"><a class="header-anchor" href="#optional" aria-hidden="true">#</a> Optional</h2><p>更优雅的<strong>避免空指针异常<code>NullPointException</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Optional类似于包装类；可以将我们具体的数据封装进Optional对象内部。</p><p>然后我们去使用Optional中封装好的数据就可以优雅的避免空指针异常了</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h4><p>一般使用Optional的静态方法**ofNullable()**来把数据封装成一个Optional对象</p><p>无论传入的参数是否为null都不会出现<code>NullPointException</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果其中的<strong>数据为null</strong> 则<strong>不会执行后续的消费代码</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218215046702.png" alt="image-20221218215046702"></p><h4 id="安全消费值" tabindex="-1"><a class="header-anchor" href="#安全消费值" aria-hidden="true">#</a> 安全消费值</h4><p>获取了Optional对象后进行使用；</p><p>调用<code>ifPresent()</code>方法来消费其中的数据</p><p>如果其中的<strong>数据为null</strong> 则<strong>不会执行后续的消费代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optinal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ifNullable</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dataOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若数据为null 则不会执行后续操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="安全获取值" tabindex="-1"><a class="header-anchor" href="#安全获取值" aria-hidden="true">#</a> 安全获取值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//数据为null则返回我们指定的值 数据不为null 则返回数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218215617303.png" alt="image-20221218215617303"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果数据不为null 则获取该数据 如果为null则根据我们指定的异常进行抛出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218220922601.png" alt="image-20221218220922601"></p><h4 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤" aria-hidden="true">#</a> 过滤</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//根据指定的过滤条件进行过滤 若不满足则返回一个新的Optional.empty对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218221610548.png" alt="image-20221218221610548"></p><h4 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断数据是否存在（返回值为boolean类型）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218221914040.png" alt="image-20221218221914040"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218222121365.png" alt="image-20221218222121365"></p><h4 id="数据转换" tabindex="-1"><a class="header-anchor" href="#数据转换" aria-hidden="true">#</a> 数据转换</h4><p><code>.map()</code>//根据定义的规则对数据进行转换</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221218222303506.png" alt="image-20221218222303506"></p><h2 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口" aria-hidden="true">#</a> 函数式接口</h2><h2 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> 方法引用</h2><h2 id="高级方法" tabindex="-1"><a class="header-anchor" href="#高级方法" aria-hidden="true">#</a> 高级方法</h2>`,146),c=[p];function o(i,l){return n(),s("div",null,c)}const r=a(t,[["render",o],["__file","java8.html.vue"]]);export{r as default};
