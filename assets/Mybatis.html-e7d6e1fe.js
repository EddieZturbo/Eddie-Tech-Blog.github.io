import{_ as p,W as r,X as i,Z as a,a1 as s,$ as e,Y as t,F as o}from"./framework-e28ace55.js";const c={},l=t('<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> Mybatis</h1><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031165504515.png" alt="image-20221031165504515"></p><p>MyBatis 轻量级，性能出色 SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据 开发效率稍逊于HIbernate，但是完全能够接受</p><p>mybatis是一个优秀的基于java的持久层框架，它<strong>内部封装了jdbc</strong>，使<strong>开发者只需要关注sql语句本身</strong>，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p><p><strong>MyBatis的主要设计目</strong>的就是让我们对执行SQL语句时对输入输出的数据管理更加方便，所以<strong>方便地写出SQL和方便地获取SQL的执行结果才是MyBatis的核心</strong>竞争力。</p><p><strong>Mybatis的功能架构分为三层</strong>：</p><p><strong>API接口层</strong>：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</p><p><strong>数据处理层</strong>：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</p><p><strong>基础支撑层</strong>：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</p>',10),d={href:"https://mybatis.org/mybatis-3/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230302143022452.png" alt="image-20230302143022452"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230302143132973.png" alt="image-20230302143132973"></p><h2 id="什么是orm" tabindex="-1"><a class="header-anchor" href="#什么是orm" aria-hidden="true">#</a> <strong>什么是ORM</strong></h2><p><strong>对象关系映射（Object Relational Mapping，简称ORM）</strong>， 简单的说，<strong>ORM是通过使用描述对象和数据库之间映射的元数据，将java程序中的对象自动持久化到关系数据库中</strong>。本质上就是将数据从一种形式转换到另外一种形式，具体如下：</p><p>具体映射：</p><ol><li>数据库的表（table） --&gt; 类（class）</li><li>记录（record，行数据）--&gt; 对象（object）</li><li>字段（field）--&gt; 对象的属性（attribute）</li></ol><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031170018003.png" alt="image-20221031170018003"></p><h3 id="什么是全自动orm" tabindex="-1"><a class="header-anchor" href="#什么是全自动orm" aria-hidden="true">#</a> 什么是全自动ORM？</h3><p>ORM框架可以根据对象关系模型直接获取，查询关联对象或者关联集合对象，<strong>简单而言使用全自动的ORM框架查询时可以不再写SQL</strong>。<strong>典型的框架如Hibernate</strong>； 因为Spring-data-jpa很多代码也是Hibernate团队贡献的，所以spring-data-jpa也是全自动ORM框架。</p><h3 id="mybatis是半自动orm" tabindex="-1"><a class="header-anchor" href="#mybatis是半自动orm" aria-hidden="true">#</a> MyBatis是半自动ORM？</h3><p>Mybatis 在查询关联对象或关联集合对象时，<strong>需要手动编写 sql 来完成，所以，称之为半自动ORM 映射工具。</strong></p><p>（PS: 正是由于MyBatis是半自动框架，基于MyBatis技术栈的框架开始考虑兼容MyBatis开发框架的基础上提供自动化的能力，比如<strong>MyBatis-plus等框架</strong>）</p><h2 id="搭建mybatis" tabindex="-1"><a class="header-anchor" href="#搭建mybatis" aria-hidden="true">#</a> 搭建MyBatis</h2><p>引入相关依赖</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031181555799.png" alt="image-20221031181555799"></p><p>创建MyBatis的核心配置文件</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031181949395.png" alt="image-20221031181949395"></p><p>创建mapper接口</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031182129813.png" alt="image-20221031182129813"></p><p>创建MyBatis的映射文件</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031182753047.png" alt="image-20221031182753047"></p><p>加入log4j日志功能</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031183258692.png" alt="image-20221031183258692"></p><p>通过junit测试功能</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031183047509.png" alt="image-20221031183047509"></p><p>执行Test console输出</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031183328746.png" alt="image-20221031183328746"></p><h2 id="crud操作" tabindex="-1"><a class="header-anchor" href="#crud操作" aria-hidden="true">#</a> CRUD操作</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031192649874.png" alt="image-20221031192649874"></p><h2 id="核心配置文件" tabindex="-1"><a class="header-anchor" href="#核心配置文件" aria-hidden="true">#</a> 核心配置文件</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031225603699.png" alt="image-20221031225603699"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031230703843.png" alt="image-20221031230703843"></p><h2 id="idea中设置file模板templates" tabindex="-1"><a class="header-anchor" href="#idea中设置file模板templates" aria-hidden="true">#</a> IDEA中设置file模板templates</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221031232628668.png" alt="image-20221031232628668"></p><h2 id="mybatis获取参数值的两种方式-重点" tabindex="-1"><a class="header-anchor" href="#mybatis获取参数值的两种方式-重点" aria-hidden="true">#</a> MyBatis获取参数值的两种方式（重点）</h2><blockquote><p>在MyBatis中，<code>#{} </code>和 <code>\${}</code> 是两种不同的参数占位符，它们的主要区别在于参数替换的时机和安全性。</p><ul><li><p><code>#{} </code>参数占位符是预编译的，会将传入的参数都当作一个字符串，然后将其转义，最终生成一个带有占位符的SQL语句。在执行SQL语句的时候，MyBatis会使用预编译语句来替换这个占位符，这样可以有效避免SQL注入攻击。<strong>#{}会自动在左右两边加<code>&#39; &#39;</code></strong></p></li><li><p><code>\${}</code> 参数占位符是直接替换传入的参数，不进行任何处理。在生成SQL语句时，MyBatis会将<code>\${}</code>替换为传入的参数值，这样容易导致SQL注入攻击。因此，<code>\${}</code> 参数占位符不太安全，不建议在动态SQL语句中使用。</p></li></ul></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> \${}</h3><p>（相当于字符串拼接 需要&#39;\${}&#39;使用单引号）</p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> <strong>#{}</strong></h3><p>(相当于？占位符 推荐使用)</p><h3 id="实体类类型的参数" tabindex="-1"><a class="header-anchor" href="#实体类类型的参数" aria-hidden="true">#</a> 实体类类型的参数</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101141054950.png" alt="image-20221101141054950"></p><h3 id="使用-param标识参数" tabindex="-1"><a class="header-anchor" href="#使用-param标识参数" aria-hidden="true">#</a> 使用@Param标识参数</h3><p><strong>单个字面量类型的参数</strong></p><p><strong>多个字面量类型的参数</strong></p><p><strong>map集合类型的参数</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101142601574.png" alt="image-20221101142601574"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101143018973.png" alt="image-20221101143018973"></p><h2 id="param注解" tabindex="-1"><a class="header-anchor" href="#param注解" aria-hidden="true">#</a> @Param注解</h2><p>识别到使用了@Param注解的话</p><p>底层在在map集合中储存<strong>以@Param的value为键</strong> <strong>以及 param*为键</strong> <strong>以参数为值</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101150032157.png" alt="image-20221101150032157"></p><h2 id="mybatis的各种查询功能" tabindex="-1"><a class="header-anchor" href="#mybatis的各种查询功能" aria-hidden="true">#</a> Mybatis的各种查询功能</h2><h3 id="查询一个实体类对象-一条记录" tabindex="-1"><a class="header-anchor" href="#查询一个实体类对象-一条记录" aria-hidden="true">#</a> 查询一个实体类对象（一条记录）</h3><h4 id="可以使用user对象来作为返回值" tabindex="-1"><a class="header-anchor" href="#可以使用user对象来作为返回值" aria-hidden="true">#</a> 可以使用User对象来作为返回值</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101152837265.png" alt="image-20221101152837265"></p><h4 id="也可以使用list-user-集合来作为返回值" tabindex="-1"><a class="header-anchor" href="#也可以使用list-user-集合来作为返回值" aria-hidden="true">#</a> 也可以使用List[&lt;]User[&gt;]集合来作为返回值</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101153457874.png" alt="image-20221101153457874"></p><h3 id="查询多条记录" tabindex="-1"><a class="header-anchor" href="#查询多条记录" aria-hidden="true">#</a> 查询多条记录</h3><h4 id="只能使用list-user-集合来作为返回值" tabindex="-1"><a class="header-anchor" href="#只能使用list-user-集合来作为返回值" aria-hidden="true">#</a> 只能使用List[&lt;]User[&gt;]集合来作为返回值</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101153707383.png" alt="image-20221101153707383"></p><h3 id="查询单行单列" tabindex="-1"><a class="header-anchor" href="#查询单行单列" aria-hidden="true">#</a> 查询单行单列</h3><h4 id="可以使用对应的数据类型来作为返回值" tabindex="-1"><a class="header-anchor" href="#可以使用对应的数据类型来作为返回值" aria-hidden="true">#</a> 可以使用对应的数据类型来作为返回值</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101154345506.png" alt="image-20221101154345506"></p><h3 id="查询一条数据为map集合" tabindex="-1"><a class="header-anchor" href="#查询一条数据为map集合" aria-hidden="true">#</a> 查询一条数据为map集合</h3><p><strong>Map集合是无序的 不可重复的</strong></p><p><strong>查询多条数据的时候不能直接使用Map&lt;String,Integer&gt;作为返回值类型</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101154925686.png" alt="image-20221101154925686"></p><h3 id="查询多条数据为map集合" tabindex="-1"><a class="header-anchor" href="#查询多条数据为map集合" aria-hidden="true">#</a> 查询多条数据为map集合</h3><h4 id="list-map-string-object" tabindex="-1"><a class="header-anchor" href="#list-map-string-object" aria-hidden="true">#</a> List&lt;Map&lt;String,Object&gt;&gt;</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101155545213.png" alt="image-20221101155545213"></p><h4 id="mapkey" tabindex="-1"><a class="header-anchor" href="#mapkey" aria-hidden="true">#</a> @MapKey</h4><p><strong>使用@MapKey注解指定的value为要作为Map集合的键</strong><strong>使用一个Primary Key的作为Map集合的键</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101160203246.png" alt="image-20221101160203246"></p><h2 id="特殊的sql执行-使用" tabindex="-1"><a class="header-anchor" href="#特殊的sql执行-使用" aria-hidden="true">#</a> 特殊的SQL执行（使用\${}）</h2><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h3><p><strong>注意#{}会自动在左右两边加&#39; &#39;</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101184809634.png" alt="image-20221101184809634"></p><h3 id="批量删除" tabindex="-1"><a class="header-anchor" href="#批量删除" aria-hidden="true">#</a> 批量删除</h3><p>delete from table <strong>where id in</strong> (1,2,3,4,5,6)方式实现批量删除时候是要使用**\${}**的</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101190022473.png" alt="image-20221101190022473"></p><h3 id="动态设置表名字" tabindex="-1"><a class="header-anchor" href="#动态设置表名字" aria-hidden="true">#</a> 动态设置表名字</h3><p>由于mysql的sql语句的表名不能加 &#39; &#39; 单引号 因此在动态的设置表名的时候要使用\${}</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101191145795.png" alt="image-20221101191145795"></p><h2 id="获取自动递增的主键" tabindex="-1"><a class="header-anchor" href="#获取自动递增的主键" aria-hidden="true">#</a> 获取自动递增的主键</h2><p>处理数据中 <strong>遇到一对多或者多对多的情况时</strong>需要考虑到<strong>获取自增的主键</strong> 使用以下两个属性进行配置</p><p><strong>useGeneratedKeys=&quot;true&quot;</strong></p><p><strong>keyProperty=&quot;参数对象的某个属性&quot;</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101192819637.png" alt="image-20221101192819637"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101192632541.png" alt="image-20221101192632541"></p><h2 id="内部类指定使用" tabindex="-1"><a class="header-anchor" href="#内部类指定使用" aria-hidden="true">#</a> 内部类指定使用$</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230207214120896.png" alt="image-20230207214120896"></p><h2 id="自定义映射resultmap" tabindex="-1"><a class="header-anchor" href="#自定义映射resultmap" aria-hidden="true">#</a> 自定义映射resultMap</h2><h3 id="resultmap处理字段和属性的映射关系" tabindex="-1"><a class="header-anchor" href="#resultmap处理字段和属性的映射关系" aria-hidden="true">#</a> resultMap处理字段和属性的映射关系</h3><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题：</h4><p><strong>在select查询的sql是通过底层反射调用setXxx()方法来将查询到的结果转换成一个Java的实体类对象</strong><strong>要求setXxx()的方法名要与数据库表中的字段名保持一致</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101223048284.png" alt="image-20221101223048284"></p><h4 id="解决方式" tabindex="-1"><a class="header-anchor" href="#解决方式" aria-hidden="true">#</a> 解决方式</h4><p>方式二：在select查询语句中给字段名as一个别名</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101223347318.png" alt="image-20221101223347318"></p><p>方式二：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--设置Mybatis的全局settings--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--将_自动映射为驼峰式 emp_name &gt; empName--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapUnderscoreToCamelCase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--这里默认为false 手动设置为true即可 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101223821044.png" alt="image-20221101223821044"></p><p>方式三：</p><p><strong>自定义映射resultMap</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101225450472.png" alt="image-20221101225450472"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221101225109268.png" alt="image-20221101225109268"></p><h3 id="多对一映射处理" tabindex="-1"><a class="header-anchor" href="#多对一映射处理" aria-hidden="true">#</a> 多对一映射处理</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102003659457.png" alt="image-20221102003659457"></p><h4 id="级联方式处理映射关系" tabindex="-1"><a class="header-anchor" href="#级联方式处理映射关系" aria-hidden="true">#</a> 级联方式处理映射关系</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">&quot;empDeptMap&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;Emp&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">&quot;eid&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;eid&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;ename&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;ename&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;age&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;sex&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;sex&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;did&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;dept.did&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;dname&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;dept.dname&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">Emp</span> <span class="token function">getEmpAndDeptByEid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;eid&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> eid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getEmpAndDeptByEid&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;empDeptMap&quot;</span><span class="token operator">&gt;</span>
    select emp<span class="token punctuation">.</span>*<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>* from t_emp emp left join t_dept dept on emp<span class="token punctuation">.</span>did <span class="token operator">=</span> dept<span class="token punctuation">.</span>did where emp<span class="token punctuation">.</span>eid <span class="token operator">=</span> #<span class="token punctuation">{</span>eid<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用association处理映射关系-常用" tabindex="-1"><a class="header-anchor" href="#使用association处理映射关系-常用" aria-hidden="true">#</a> 使用association处理映射关系(常用)</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102003503641.png" alt="image-20221102003503641"></p><h4 id="分步查询-重点掌握" tabindex="-1"><a class="header-anchor" href="#分步查询-重点掌握" aria-hidden="true">#</a> 分步查询（重点掌握 ）</h4><p>分步查询的优点：<strong>可以实现延迟加载</strong>，但是必须在核心配置文件中设置全局配置信息：</p><p><strong>将sql以及查询结果中的某个字段设置为分步查询的条件</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102012829838.png" alt="image-20221102012829838"></p><h2 id="一对多映射关系处理" tabindex="-1"><a class="header-anchor" href="#一对多映射关系处理" aria-hidden="true">#</a> 一对多映射关系处理</h2><h3 id="collection" tabindex="-1"><a class="header-anchor" href="#collection" aria-hidden="true">#</a> Collection</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102102506767.png" alt="image-20221102102506767"></p><h3 id="分布查询" tabindex="-1"><a class="header-anchor" href="#分布查询" aria-hidden="true">#</a> 分布查询</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102104732987.png" alt="image-20221102104732987"></p><p><strong>collection标签效果一样</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102105134119.png" alt="image-20221102105134119"></p><h2 id="延迟加载-分布查询的好处" tabindex="-1"><a class="header-anchor" href="#延迟加载-分布查询的好处" aria-hidden="true">#</a> 延迟加载（分布查询的好处）</h2><h3 id="全局设置" tabindex="-1"><a class="header-anchor" href="#全局设置" aria-hidden="true">#</a> <strong>全局设置：</strong></h3><p><strong>开启延迟加载需要进行全局配置</strong></p><p>**lazyLoadingEnabled：**延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个 属性会按需加载（目前版本默认false 无需手动设置）</p><h3 id="局部设置" tabindex="-1"><a class="header-anchor" href="#局部设置" aria-hidden="true">#</a> <strong>局部设置：</strong></h3><p>collection中的<strong>fetchType属性</strong>设置当前的分步查询是否使用延迟加载，<strong>fetchType=&quot;lazy(延迟加 载)|eager(立即加载)&quot;</strong></p><h4 id="instance" tabindex="-1"><a class="header-anchor" href="#instance" aria-hidden="true">#</a> Instance：</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102094947130.png" alt="image-20221102094947130"></p><h2 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql" aria-hidden="true">#</a> 动态SQL</h2><p>Mybatis框架的动态SQL技术是一种<strong>根据特定条件动态拼装SQL语句</strong>的功能，它存在的意义是为了<strong>解决拼接SQL语句字符串时的痛点问题</strong></p>`,135),h=a("thead",null,[a("tr",null,[a("th",null,"元素"),a("th",null,"作用"),a("th",null,"备注")])],-1),u={href:"http://c.biancheng.net/mybatis/if.html",target:"_blank",rel:"noopener noreferrer"},m=a("td",null,"判断语句",-1),y=a("td",null,"单条件分支判断",-1),k={href:"http://c.biancheng.net/mybatis/choose-when-otherwise.html",target:"_blank",rel:"noopener noreferrer"},b=a("td",null,"相当于 Java 中的 switch case 语句",-1),v=a("td",null,"多条件分支判断",-1),f={href:"http://c.biancheng.net/mybatis/trim.html",target:"_blank",rel:"noopener noreferrer"},x={href:"http://c.biancheng.net/mybatis/where.html",target:"_blank",rel:"noopener noreferrer"},q=a("td",null,"辅助元素",-1),z=a("td",null,"用于处理一些SQL拼装问题",-1),_={href:"http://c.biancheng.net/mybatis/foreach.html",target:"_blank",rel:"noopener noreferrer"},M=a("td",null,"循环语句",-1),S=a("td",null,"在in语句等列举条件常用",-1),L={href:"http://c.biancheng.net/mybatis/bind.html",target:"_blank",rel:"noopener noreferrer"},w=a("td",null,"辅助元素",-1),Q=a("td",null,"拼接参数",-1),B=t(`<h3 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h3><p>if标签可<strong>通过test属性的表达式进行判断</strong>，若<strong>表达式的结果为true，则标签中的内容会执行</strong>；反之标签中的内容不会执行</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>判断条件<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SQL语句
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102214520527.png" alt="image-20221102214520527"></p><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> where</h3><p><strong>where和if一般结合使用：</strong></p><p>a&gt;<strong>若where标签中的if条件都不满足</strong>，则where标签没有任何功能，即<strong>不会添加where关键字</strong></p><p>b&gt;<strong>若where标签中的if条件满足</strong>，则where标签<strong>会自动添加where关键字</strong>，并将条件<strong>最前方多余的 and去掉</strong></p><p><strong>注意：where标签不能去掉条件最后多余的and</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>判断条件<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        AND/OR ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102215324477.png" alt="image-20221102215324477"></p><h3 id="trim" tabindex="-1"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim</h3><p><strong>trim可以实现where的功能 并且解决where无法去除掉sql语句中后面的内容的问题</strong></p><p>where xxx and xxx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>trim用于去掉或添加标签中的内容
常用属性：
prefix：在trim标签中的内容的前面添加某些内容
prefixOverrides：在trim标签中的内容的前面去掉某些内容
suffix：在trim标签中的内容的后面添加某些内容
suffixOverrides：在trim标签中的内容的后面去掉某些内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102220542754.png" alt="image-20221102220542754"></p><h3 id="choose、when、otherwise" tabindex="-1"><a class="header-anchor" href="#choose、when、otherwise" aria-hidden="true">#</a> choose、when、otherwise</h3><p><strong>choose、when、otherwise</strong>相当于<strong>if.......else if.......else</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>判断条件1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>---------<span class="token comment">&lt;!--&lt;if&gt;--&gt;</span>
        SQL语句1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>判断条件2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>---------<span class="token comment">&lt;!--&lt;else if&gt;--&gt;</span>
        SQL语句2
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>判断条件3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>---------<span class="token comment">&lt;!--&lt;else if&gt;--&gt;</span>
        SQL语句3
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>--------------------<span class="token comment">&lt;!--&lt;else&gt;--&gt;</span>
        SQL语句4
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102224438964.png" alt="image-20221102224438964"></p><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h3><p>对于一些 SQL 语句中含有 in 条件，需要迭代条件集合来生成的情况，<strong>可以使用 foreach 来实现 SQL 条件的迭代</strong></p><p>Mybatis <strong>foreach 标签用于循环语句</strong>，<strong>它很好的支持了数据和 List、set 接口的集合</strong></p><p>foreach 标签主要有以下属性，说明如下。</p><ul><li>**item：**表示集合中每一个元素进行迭代时的别名。</li><li>**index：**指定一个名字，表示在迭代过程中每次迭代到的位置。</li><li>**open：**表示该语句以什么开始（既然是 in 条件语句，所以必然以<code>(</code>开始）。</li><li>**separator：**表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以<code>,</code>作为分隔符）。</li><li>**close：**表示该语句以什么结束（既然是 in 条件语句，所以必然以<code>)</code>开始）。</li><li>使用 foreach 标签时，<strong>最关键、最容易出错的是 collection 属性</strong>，该属性是<strong>必选的</strong>，但在不同情况下该属性的值是不一样的，主要有以下 3 种情况： <ul><li>如果传入的是单参数且参数类型是一个 List，collection 属性值为 list。</li><li>如果传入的是单参数且参数类型是一个 array 数组，collection 的属性值为 array。</li><li>如果传入的参数是多个，需要把它们封装成一个 Map，当然单参数也可以封装成 Map。Map 的 key 是参数名，collection 属性值是传入的 List 或 array 对象在自己封装的 Map 中的 key。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list|array|map key<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    参数值
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List集合</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102233421399.png" alt="image-20221102233421399"></p><p>数组</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102233707056.png" alt="image-20221102233707056"></p><h3 id="sql片段" tabindex="-1"><a class="header-anchor" href="#sql片段" aria-hidden="true">#</a> SQL片段</h3><p>sql片段，可以<strong>记录一段公共sql片段</strong>，在使用的地方<strong>通过include标签进行引入</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221102234610040.png" alt="image-20221102234610040"></p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><p>在 Mybatis 中，<strong>update 语句可以使用 set 标签动态更新列</strong>。set 标签可以<strong>为 SQL 语句动态的添加 set 关键字</strong>，<strong>剔除追加到条件末尾多余的逗号</strong></p><h2 id="mybatis的缓存" tabindex="-1"><a class="header-anchor" href="#mybatis的缓存" aria-hidden="true">#</a> MyBatis的缓存</h2><p><strong>缓存</strong>可以<strong>将数据保存在内存中</strong>，是互联网系统常常用到的。目前流行的缓存服务器有 <strong>MongoDB、Redis、Ehcache</strong> 等。<strong>缓存是在计算机内存上保存的数据，读取时无需再从磁盘读入</strong>，因此<strong>具备快速读取和使用的特点</strong></p><h3 id="一级缓存" tabindex="-1"><a class="header-anchor" href="#一级缓存" aria-hidden="true">#</a> 一级缓存</h3><p>一级缓存是<strong>SqlSession级别</strong>的，通过<strong>同一个SqlSession查询的数据会被缓存</strong>，<strong>下次查询相同的数据</strong>，就会<strong>从缓存中直接获取</strong>，<strong>不会从数据库重新访问</strong></p><p><strong>默认情况下，MyBatis 只开启一级缓存</strong></p><p>一级缓存是基于 **PerpetualCache（MyBatis自带）**的 <strong>HashMap 本地缓存</strong>，作用范围为 session 域内。<strong>当 session flush（刷新）或者 close（关闭）之后</strong>，<strong>该 session 中所有的 cache（缓存）就会被清空</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103160304108.png" alt="image-20221103160304108"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103160638484.png" alt="image-20221103160638484"></p><h4 id="使一级缓存失效的四种情况" tabindex="-1"><a class="header-anchor" href="#使一级缓存失效的四种情况" aria-hidden="true">#</a> 使一级缓存失效的四种情况：</h4><h5 id="不同的sqlsession对应不同的一级缓存" tabindex="-1"><a class="header-anchor" href="#不同的sqlsession对应不同的一级缓存" aria-hidden="true">#</a> <strong>不同的SqlSession对应不同的一级缓存</strong></h5><h5 id="同一个sqlsession但是查询条件不同" tabindex="-1"><a class="header-anchor" href="#同一个sqlsession但是查询条件不同" aria-hidden="true">#</a> <strong>同一个SqlSession但是查询条件不同</strong></h5><h5 id="同一个sqlsession两次查询期间执行了任何一次增删改操作" tabindex="-1"><a class="header-anchor" href="#同一个sqlsession两次查询期间执行了任何一次增删改操作" aria-hidden="true">#</a> <strong>同一个SqlSession两次查询期间执行了任何一次增删改操作</strong></h5><h5 id="同一个sqlsession两次查询期间手动清空了缓存" tabindex="-1"><a class="header-anchor" href="#同一个sqlsession两次查询期间手动清空了缓存" aria-hidden="true">#</a> <strong>同一个SqlSession两次查询期间手动清空了缓存</strong></h5><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103163509347.png" alt="image-20221103163509347"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103163715991.png" alt="image-20221103163715991"></p><h3 id="二级缓存" tabindex="-1"><a class="header-anchor" href="#二级缓存" aria-hidden="true">#</a> 二级缓存</h3><p><strong>二级缓存是SqlSessionFactory级别</strong>，通过<strong>同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存</strong>；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p><strong>开启二级缓存后</strong>，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询，具体的工作流程如下所示。</p><p>二级缓存开启后，<strong>同一个namespace下的所有操作语句，都影响着同一个Cache</strong>，即<strong>二级缓存被多个SqlSession共享</strong>，<strong>是一个全局的变量</strong>。 当开启缓存后，数据的查询执行的流程就是 <strong>二级缓存 -&gt; 一级缓存 -&gt; 数据库。</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103164144414.png" alt="image-20221103164144414"></p><h4 id="二级缓存配置" tabindex="-1"><a class="header-anchor" href="#二级缓存配置" aria-hidden="true">#</a> 二级缓存配置</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103164306706.png" alt="image-20221103164306706"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103164609940.png" alt="image-20221103164609940"></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>eviction</td><td>代表的是缓存回收策略，目前 MyBatis 提供以下策略。LRU：使用较少，移除最长时间不用的对象；FIFO：先进先出，按对象进入缓存的顺序来移除它们；SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象；WEAK：弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象。</td></tr><tr><td>flushInterval</td><td>刷新间隔时间，单位为毫秒，这里配置的是 100 秒刷新，如果省略该配置，那么只有当 SQL 被执行的时候才会刷新缓存。</td></tr><tr><td>size</td><td>引用数目，正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。这里配置的是 1024 个对象。</td></tr><tr><td>readOnly</td><td>只读，默认值为 false，意味着缓存数据只能读取而不能修改，这样设置的好处是可以快速读取缓存，缺点是没有办法修改缓存。</td></tr></tbody></table><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103165713909.png" alt="image-20221103165713909"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103165754661.png" alt="image-20221103165754661"></p><h4 id="使二级缓存失效的情况" tabindex="-1"><a class="header-anchor" href="#使二级缓存失效的情况" aria-hidden="true">#</a> 使二级缓存失效的情况：</h4><p><strong>两次查询之间执行了任意的增删改</strong>，会使一级和二级缓存同时失效</p><h3 id="mybatis缓存查询的顺序" tabindex="-1"><a class="header-anchor" href="#mybatis缓存查询的顺序" aria-hidden="true">#</a> MyBatis缓存查询的顺序</h3><p><strong>先查询二级缓存</strong>，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</p><p><strong>如果二级缓存没有命中，再查询一级缓存</strong></p><p><strong>如果一级缓存也没有命中，则查询数据库</strong></p><p><strong>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</strong></p><h2 id="整合第三方缓存ehcache" tabindex="-1"><a class="header-anchor" href="#整合第三方缓存ehcache" aria-hidden="true">#</a> 整合第三方缓存EHCache</h2><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr></tbody></table><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103183151226.png" alt="image-20221103183151226"></p><h3 id="ehcache配置文件说明" tabindex="-1"><a class="header-anchor" href="#ehcache配置文件说明" aria-hidden="true">#</a> EHCache配置文件说明</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103183727701.png" alt="image-20221103183727701"></p><h2 id="加入logback日志" tabindex="-1"><a class="header-anchor" href="#加入logback日志" aria-hidden="true">#</a> 加入logback日志</h2><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103183240888.png" alt="image-20221103183240888"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103183436401.png" alt="image-20221103183436401"></p><h2 id="mybatis逆向工程" tabindex="-1"><a class="header-anchor" href="#mybatis逆向工程" aria-hidden="true">#</a> Mybatis逆向工程</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103183804217.png" alt="image-20221103183804217"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103202939778.png" alt="image-20221103202939778"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103203142791.png" alt="image-20221103203142791"></p><h2 id="query-by-criteria-qbc" tabindex="-1"><a class="header-anchor" href="#query-by-criteria-qbc" aria-hidden="true">#</a> <strong>Query By Criteria</strong>--QBC</h2>`,82),j={href:"https://www.cnblogs.com/-zhuang/articles/10369082.html",target:"_blank",rel:"noopener noreferrer"},E=t('<h2 id="分页插件" tabindex="-1"><a class="header-anchor" href="#分页插件" aria-hidden="true">#</a> 分页插件</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103210955589.png" alt="image-20221103210955589"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221103211817252.png" alt="image-20221103211817252"></p><p><strong>常用数据：</strong></p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage/isLastPage：是否为第一页/最后一页</p><p>hasPreviousPage/hasNextPage：是否存在上一页/下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>',15);function P(O,C){const n=o("ExternalLinkIcon");return r(),i("div",null,[l,a("p",null,[a("a",d,[s("MyBatis3 官方网站"),e(n)])]),g,a("table",null,[h,a("tbody",null,[a("tr",null,[a("td",null,[a("a",u,[s("if"),e(n)])]),m,y]),a("tr",null,[a("td",null,[a("a",k,[s("choose（when、otherwise）"),e(n)])]),b,v]),a("tr",null,[a("td",null,[a("a",f,[s("trim"),e(n)]),s("、"),a("a",x,[s("where"),e(n)])]),q,z]),a("tr",null,[a("td",null,[a("a",_,[s("foreach"),e(n)])]),M,S]),a("tr",null,[a("td",null,[a("a",L,[s("bind"),e(n)])]),w,Q])])]),B,a("p",null,[a("a",j,[s("代码生成器原理和使用、QBC、Mybattis扩展 - payn - 博客园 (cnblogs.com)"),e(n)])]),E])}const I=p(c,[["render",P],["__file","Mybatis.html.vue"]]);export{I as default};
