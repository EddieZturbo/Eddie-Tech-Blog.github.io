import{_ as e,W as a,X as s,Y as n}from"./framework-e28ace55.js";const i={},t=n(`<h1 id="maven高级" tabindex="-1"><a class="header-anchor" href="#maven高级" aria-hidden="true">#</a> Maven高级</h1><h2 id="分模块开发" tabindex="-1"><a class="header-anchor" href="#分模块开发" aria-hidden="true">#</a> 分模块开发</h2><p>将原始模块<strong>按照功能拆分成若干个子模块</strong>，<strong>方便模块间的相互调用</strong>，<strong>接口共享</strong></p><p>项目中的<strong>每一层都可以单独维护</strong>，也<strong>可以很方便的被别人使用</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108201703441.png" alt="image-20221108201703441"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108201635795.png" alt="image-20221108201635795"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108201803280.png" alt="image-20221108201803280"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202239523.png" alt="image-20221108202239523"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202507246.png" alt="image-20221108202507246"></p><h2 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h2><h3 id="依赖传递" tabindex="-1"><a class="header-anchor" href="#依赖传递" aria-hidden="true">#</a> 依赖传递</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203155134.png" alt="image-20221108203155134"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202831103.png" alt="image-20221108202831103"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202604874.png" alt="image-20221108202604874"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202810537.png" alt="image-20221108202810537"></p><h3 id="依赖冲突" tabindex="-1"><a class="header-anchor" href="#依赖冲突" aria-hidden="true">#</a> 依赖冲突</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202909239.png" alt="image-20221108202909239"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108202958596.png" alt="image-20221108202958596"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203042847.png" alt="image-20221108203042847"></p><h3 id="可选依赖" tabindex="-1"><a class="header-anchor" href="#可选依赖" aria-hidden="true">#</a> 可选依赖</h3><p>可选依赖指<strong>对外隐藏</strong>当前所依赖的资源---<strong>不透明</strong></p><p>（角度是站在<strong>我们的依赖要被别人使用</strong> 我们可以<strong>通过可选依赖来设置隐藏我们使用的某些依赖</strong> <strong>不让别人使用</strong>）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203356631.png" alt="image-20221108203356631"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203652426.png" alt="image-20221108203652426"></p><h3 id="排除依赖" tabindex="-1"><a class="header-anchor" href="#排除依赖" aria-hidden="true">#</a> 排除依赖</h3><p>排除依赖指<strong>主动断开依赖的资源</strong>，被排除的资源无需指定版本---<strong>不需要</strong></p><p>（角度是站在<strong>我们要使用别人的依赖时</strong>，我们<strong>指明要排除的依赖</strong> 从而<strong>不使用即不需要别人的某些依赖</strong>）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203543761.png" alt="image-20221108203543761"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203656300.png" alt="image-20221108203656300"></p><h2 id="聚合和继承" tabindex="-1"><a class="header-anchor" href="#聚合和继承" aria-hidden="true">#</a> 聚合和继承</h2><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h3><p><strong>聚合工程主要是用来管理项目</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108204552453.png" alt="image-20221108204552453"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108204834314.png" alt="image-20221108204834314"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108204954767.png" alt="image-20221108204954767"></p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108205147507.png" alt="image-20221108205147507"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108205129584.png" alt="image-20221108205129584"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108220846408.png" alt="image-20221108220846408"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108221314374.png" alt="image-20221108221314374"></p><h3 id="dependencymanagement" tabindex="-1"><a class="header-anchor" href="#dependencymanagement" aria-hidden="true">#</a> DependencyManagement</h3><p><strong>只是声明依赖</strong>并<strong>不实现引入</strong>；因此<strong>子工程中</strong>需要<strong>显示的声明需要用的依赖</strong></p><p>只有<strong>在子项目中引入了相关依赖</strong>并且<strong>没有指定版本号</strong>；则<strong>是从父项目DependencyManagement中继承</strong>（version和scope都会继承）</p><p>通常在<strong>父工程的POM中声明</strong> 目的是<strong>子工程</strong>在声明依赖时<strong>不用显示的声明版本号</strong>；而是<strong>使用和父工程中指定的版本号保持一致</strong></p><p>在子工程中可以省略版本号指定；即和父工程保持一致；（<strong>若子工程单独指定了版本号则以子工程的为准</strong>）</p><p>maven会沿着父子层次向上走，直到找到拥有DependencyManagement元素的项目；并使用DependencyManagement指定的版本号</p><p>可以<strong>避免</strong>在所有的子项目中<strong>频繁的声明版本号</strong> 同时<strong>避免版本号错乱</strong>（不一致）的麻烦</p><p><strong>若需要对项目中的所有依赖进行版本变更</strong> <strong>只需在父工程</strong>中<strong>更新一处即可</strong></p><h3 id="聚合与继承的区别" tabindex="-1"><a class="header-anchor" href="#聚合与继承的区别" aria-hidden="true">#</a> 聚合与继承的区别</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221108203908358.png" alt="image-20221108203908358"></p><h2 id="跳过test" tabindex="-1"><a class="header-anchor" href="#跳过test" aria-hidden="true">#</a> 跳过Test</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221204162053284.png" alt="image-20221204162053284"></p><h2 id="发布到仓库" tabindex="-1"><a class="header-anchor" href="#发布到仓库" aria-hidden="true">#</a> 发布到仓库</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221204162146471.png" alt="image-20221204162146471"></p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h2 id="多环境配置与应用" tabindex="-1"><a class="header-anchor" href="#多环境配置与应用" aria-hidden="true">#</a> 多环境配置与应用</h2><h2 id="私服" tabindex="-1"><a class="header-anchor" href="#私服" aria-hidden="true">#</a> 私服</h2><h2 id="mvn命令" tabindex="-1"><a class="header-anchor" href="#mvn命令" aria-hidden="true">#</a> mvn命令</h2><blockquote><p>常见的mvn运行参数：</p><ol><li><p>clean：删除target目录，即删除编译后生成的文件，包括编译产生的class文件、jar包、war包等。</p></li><li><p>compile：编译Java源代码。</p></li><li><p>test：运行测试用例。</p></li><li><p>package：打包，将编译后的Java源代码打包成jar或war包。</p></li><li><p>install：安装打包好的jar或war包到本地仓库，以便其他项目可以引用。</p></li><li><p>deploy：将打包好的jar或war包部署到远程仓库，以便其他开发人员或项目可以引用。</p></li><li><p>-D参数：通过-D参数可以设置系统属性，例如mvn -Dmaven.test.skip=true表示跳过测试。</p><blockquote><p>常见的-D参数：</p><ol><li>-Dmaven.test.skip=true：跳过测试，不执行单元测试。</li><li>-DskipTests=true：跳过测试，不执行单元测试。</li><li>-Dmaven.compiler.source=1.8：指定Java源代码的版本，例如1.6、1.7、1.8等。</li><li>-Dmaven.compiler.target=1.8：指定生成的Java字节码的版本，例如1.6、1.7、1.8等。</li><li>-Dmaven.compiler.encoding=UTF-8：指定编译时使用的字符集，例如UTF-8、GBK等。</li><li>-Dfile.encoding=UTF-8：指定运行时使用的字符集，例如UTF-8、GBK等。</li><li>-Djava.net.preferIPv4Stack=true：启用IPv4协议。</li><li>-Djava.net.preferIPv6Addresses=true：启用IPv6协议。</li><li>-Dmaven.repo.local=/path/to/local/repository：指定本地仓库的位置。</li><li>-Dmaven.home=/path/to/maven：指定Maven安装的路径。</li><li>-Dhttps.protocols=TLSv1.2：指定使用的HTTPS协议版本，例如TLSv1、TLSv1.1、TLSv1.2等。</li><li>-Djavax.net.ssl.trustStore=/path/to/truststore.jks：指定SSL证书的信任库路径。</li><li>-Djavax.net.ssl.trustStorePassword=password：指定SSL证书的信任库密码。</li><li>-Dmaven.wagon.http.ssl.insecure=true：跳过SSL验证。</li></ol><p>以上是一些常用的-D参数，可以根据需要组合使用。使用-D参数可以在不修改POM文件的情况下，对Maven进行配置和定制。</p></blockquote></li><li><p>-X参数：启用debug模式，输出更详细的日志信息。</p></li><li><p>-U参数：强制更新依赖项，即使它们已经存在于本地仓库中也要重新下载。</p></li><li><p>-e参数：输出详细的错误信息，包括堆栈跟踪等。</p></li><li><p>-P参数：指定使用哪个profile。例如，mvn clean install -P dev表示使用名为dev的profile。</p></li><li><p>-pl参数：指定构建哪些模块。例如，mvn clean install -pl module1,module2表示只构建module1和module2模块。</p></li><li><p>-am参数：同时构建依赖该模块的所有模块。例如，mvn clean install -pl module1 -am表示构建module1以及依赖module1的所有模块。</p></li></ol><p>以上是一些常用的mvn运行参数，可以根据需要组合使用。使用mvn命令时，可以通过mvn -h或mvn --help命令获取更多帮助信息。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/crossoverJie/cim.git
<span class="token builtin class-name">cd</span> cim
mvn <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true clean package
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60),r=[t];function p(o,g){return a(),s("div",null,r)}const c=e(i,[["render",p],["__file","Maven.html.vue"]]);export{c as default};
