import{_ as t,W as o,X as p,Z as n,a1 as s,$ as c,Y as a,F as l}from"./framework-e28ace55.js";const i={},u=a(`<h1 id="java-concurrency-programming" tabindex="-1"><a class="header-anchor" href="#java-concurrency-programming" aria-hidden="true">#</a> Java Concurrency Programming</h1><h2 id="理论基础" tabindex="-1"><a class="header-anchor" href="#理论基础" aria-hidden="true">#</a> 理论基础</h2><h3 id="cpu-缓存模型" tabindex="-1"><a class="header-anchor" href="#cpu-缓存模型" aria-hidden="true">#</a> CPU 缓存模型</h3><blockquote><p><strong>CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题(CPU 处理速度和内存处理速度不对等)，</strong></p><p>内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230412004416756.png" alt="image-20230412004416756"></p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211100635374.png" alt="image-20230211100635374"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211095448065.png" alt="image-20230211095448065"></p><h3 id="指令重排序" tabindex="-1"><a class="header-anchor" href="#指令重排序" aria-hidden="true">#</a> <strong>指令重排序</strong></h3><blockquote><p>==指令重排==:为了提升执行速度/性能，计算机在执行程序代码的时候，会对指令进行重排序.指令重排的前提是，重排指令不能影响结果</p><ul><li><strong>编译器优化重排</strong> ：==编译器==（包括 JVM、JIT 编译器等）在不改变单线程程序语义的前提下，重新安排语句的执行顺序。</li><li><strong>指令并行重排</strong> ：现代==处理器==采用了指令级并行技术(Instruction-Level Parallelism，ILP)来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li></ul><p>Java 源代码会经历 <strong>编译器优化重排 —&gt; 指令并行重排 —&gt; 内存系统重排</strong> 的过程，最终才变成操作系统可执行的指令序列。</p></blockquote><blockquote><p>**对于编译器，**通过禁止特定类型的编译器重排序的方式来禁止重排序。</p><p>**对于处理器，**通过插入内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）的方式来禁止特定类型的处理器重排序。指令并行重排和内存系统重排都属于是处理器级别的指令重排序。</p><ul><li>内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）是一种 CPU 指令，用来禁止处理器指令发生重排序（像屏障一样），从而保障指令执行的有序性。另外，为了达到屏障的效果，它也会使处理器写入、读取值之前，将主内存的值写入高速缓存，清空无效队列，从而保障变量的可见性。</li></ul></blockquote><blockquote><p><strong>指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong> ，所以在多线程下，指令重排序可能会导致一些问题。</p></blockquote><h3 id="上下文切换" tabindex="-1"><a class="header-anchor" href="#上下文切换" aria-hidden="true">#</a> 上下文切换</h3><blockquote><p>上下文切换：</p><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程<strong>分配时间片</strong>并<strong>轮转</strong>的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。</p><p><strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p><p><strong>挂起线程</strong>和<strong>恢复线程</strong>的操作<strong>都需要转入内核态中完成</strong>，这些操作对系统的并发性能带来了很大的压力</p><p>上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p><p>Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。</p></blockquote><h3 id="并发三要素" tabindex="-1"><a class="header-anchor" href="#并发三要素" aria-hidden="true">#</a> 并发三要素</h3><blockquote><p>==可见性==: <strong>CPU缓存</strong>引起可见性：一个线程对共享变量的修改，另外一个线程能够立刻看到。</p><p>==原子性==: <strong>CPU按时间片分时复用</strong>（（线程切换））引起原子性：即一个操作或者多个操作 <strong>要么全部执行</strong>并且不会被任何因素打断，<strong>要么就都不执行</strong>。</p><p>==有序性==: <strong>重排序</strong>引起有序性：即程序执行的顺序按照代码的先后顺序执行。</p><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ul></blockquote><h4 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h4><blockquote><p>当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。</p><p>在 Java 中，可以借助<code>synchronized</code> 、<code>volatile</code> 以及各种 <code>Lock</code> 实现可见性。</p><p>如果我们将变量声明为 <code>volatile</code> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取</p></blockquote><h4 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性" aria-hidden="true">#</a> 原子性</h4><blockquote><p>一次操作或者多次操作，要么所有的操作全部<strong>都得到执行</strong>并且<strong>不会受到任何因素的干扰</strong>而中断，要么<strong>都不执行</strong>。</p><p>在 Java 中，可以借助<code>synchronized</code> 、各种 <code>Lock</code> 以及各种原子类实现原子性。</p><p><code>synchronized</code> 和各种 <code>Lock</code> 可以保证任一时刻只有一个线程访问该代码块，因此可以保障原子性。各种原子类是利用 CAS (compare and swap) 操作（可能也会用到 <code>volatile</code>或者<code>final</code>关键字）来保证原子操作。</p></blockquote><h4 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性" aria-hidden="true">#</a> 有序性</h4><blockquote><p>由于指令重排序问题，代码的执行顺序未必就是编写代码时候的顺序。</p><p>Java 源代码会经历 <strong>编译器优化重排 —&gt; 指令并行重排 —&gt; 内存系统重排</strong> 的过程，最终才变成操作系统可执行的指令序列。</p><p>我们上面讲重排序的时候也提到过：</p><blockquote><p><strong>指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong> ，所以在多线程下，指令重排序可能会导致一些问题。</p></blockquote><p>在 Java 中，<code>volatile</code> 关键字可以禁止指令进行重排序优化。</p><p>对于处理器重排序,JMM的处理器重排序规则会要求Java编译器在生成指令序列时,插入特定类型的内存屏障(Memory Barriers,Intel称之为Memory Fence)指令,通过内存屏障指令来禁止特定类型的处理器重排序。</p></blockquote><h3 id="线程安全的实现方法" tabindex="-1"><a class="header-anchor" href="#线程安全的实现方法" aria-hidden="true">#</a> 线程安全的实现方法</h3><blockquote><p><strong>同步方案</strong></p><ul><li><strong>Mutex（阻塞）同步</strong><ul><li>synchronized</li><li>ReentrantLock...</li></ul></li><li><strong>非阻塞同步</strong><ul><li>CAS（轻量级锁）</li><li>AtomicInteter(原子类操作)</li></ul></li></ul><p><strong>无同步方案</strong></p><ul><li>栈封闭</li><li>线程本地存储(ThreadLocal Storage)</li></ul></blockquote><h2 id="线程基础" tabindex="-1"><a class="header-anchor" href="#线程基础" aria-hidden="true">#</a> 线程基础</h2><h2 id="java并发机制的底层实现原理" tabindex="-1"><a class="header-anchor" href="#java并发机制的底层实现原理" aria-hidden="true">#</a> Java并发机制的底层实现原理</h2><h3 id="java-object-memory-layout" tabindex="-1"><a class="header-anchor" href="#java-object-memory-layout" aria-hidden="true">#</a> Java Object Memory Layout</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221024174142826.png" alt="image-20221024174142826"></p><p>In Hotspot VM, the object layout in the heap can be divided into three parts,</p><ol><li>Header</li><li>Instance Data</li><li>Padding</li></ol><h4 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> Header👀</h4><p>It saves two types of information.</p><ol><li>Save the object self&#39;s runtime information, the officials call it <code>Mark Word</code>, such as HashCode, GC generation age, lock states, the lock that the thread holds, biased thread id, biased timestamp.</li><li>Save the type pointer, that&#39;s the pointer to the meta-type, Java VM used it to determine which type of this object is, this is an optional implementation in the VM. If the object is an array, there is a data in the header to save the array&#39;s length</li></ol><h5 id="mark-word" tabindex="-1"><a class="header-anchor" href="#mark-word" aria-hidden="true">#</a> Mark Word👁️</h5><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210154448670.png" alt="image-20230210154448670"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一个对象创建时：
如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的 thread、epoch、age 都为 0
偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 
-XX:BiasedLockingStartupDelay=0 来禁用延迟
如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值

轻量锁和重量锁一个会把hashcode放在栈帧的锁记录，一个会放到monitor中（解锁的时候会还原回来）
而偏向锁没有额外的储存空间 当获取了hashcode则会弃用偏向锁（消除偏向状态） 重写markword

谨记偏向是指类偏向，而不是对象实例偏向；一个类只能有一个偏向
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210154116888.png" alt="image-20230210154116888"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210145412031.png" alt="image-20230210145412031"></p><p>The 32 bit and 64 bit VM are different.</p><ul><li>32-bit word</li></ul><table><thead><tr><th>Object</th><th>Format</th></tr></thead><tbody><tr><td>normal object</td><td>hash: 25, age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>biased object</td><td>JavaThread*: 23, epoch: 2 age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>CMS free block</td><td>32 bits</td></tr><tr><td>CMS promoted object</td><td>PromotedObject*: 29, promo_bits: 3</td></tr></tbody></table><ul><li>64-bit word</li></ul><table><thead><tr><th>Object</th><th>Format</th></tr></thead><tbody><tr><td>normal object</td><td>unused: 25, hash: 31, unused: 1, age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>biased object</td><td>JavaThread*: 54, epoch: 2, unused: 1, age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>CMS promoted object</td><td>PromotedObject*: 61, promo_bits: 3</td></tr><tr><td>CMS free block</td><td>64 bits</td></tr><tr><td>COOPs &amp;&amp; normal object</td><td>unused: 25, hash: 31, cms_free: 1, age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>COOPs &amp;&amp; biased object</td><td>JavaThread*: 54, epoch: 2, cms_free: 1, age: 4, biased_lock: 1, lock: 2</td></tr><tr><td>COOPs &amp;&amp; CMS promoted object</td><td>narrowOop: 32, unused: 24, cms_free: 1, unused: 4, promo_bits: 3</td></tr><tr><td>COOPs &amp;&amp; CMS free block</td><td>unused: 21, size: 35, cms_free: 1, unused: 7</td></tr></tbody></table><h5 id="class-metadata-address" tabindex="-1"><a class="header-anchor" href="#class-metadata-address" aria-hidden="true">#</a> Class Metadata Address</h5><p>指向该对象的所属类型</p><h5 id="is-array-array-length-nothing" tabindex="-1"><a class="header-anchor" href="#is-array-array-length-nothing" aria-hidden="true">#</a> Is Array ? Array Length : nothing</h5><h4 id="instance-data" tabindex="-1"><a class="header-anchor" href="#instance-data" aria-hidden="true">#</a> Instance Data</h4><p>The instance data saves the variables defined in the class, including the variable defined in the parent class. The store sequence will be impacted by the JVM argument <code>-XX:FieldsAllocationStyle</code> and the sequence defined in the class.</p><blockquote><p>The Hotspot&#39;s default allocation sequence is that,</p><ul><li>longs/doubles</li><li>ints</li><li>shorts/chars</li><li>bytes/booleans</li><li>oops(Ordinary Object Pointers, OOP)</li></ul></blockquote><p>Also, if JVM argument <code>-XX:CompactFields</code> is true(default value), the thinner variable in the child class will be inserted into the gap of parent variables.</p><h4 id="padding" tabindex="-1"><a class="header-anchor" href="#padding" aria-hidden="true">#</a> Padding</h4><p>The HotSpot VM&#39;s auto memory management system requires the starting address of the object must be 8-byte event digits, which means any object&#39;s size muse be 8-byte event digits. So, if an object&#39;s instance data doesn&#39;t align, it needs padding.</p><h3 id="jmm-java-内存模型" tabindex="-1"><a class="header-anchor" href="#jmm-java-内存模型" aria-hidden="true">#</a> JMM(Java 内存模型)</h3>`,51),r=n("p",null,"我们的程序运行在操作系统之上，操作系统屏蔽了底层硬件的操作细节，将各种硬件资源虚拟化。于是，操作系统也就同样需要解决内存缓存不一致性问题。",-1),d=n("p",null,[s("操作系统通过 "),n("strong",null,"内存模型（Memory Model）"),s(" 定义一系列规范来解决这个问题。无论是 Windows 系统，还是 Linux 系统，它们都有特定的内存模型")],-1),k=n("p",null,[s("Java 语言是跨平台的，它需要"),n("strong",null,"Java自己提供一套内存模型以屏蔽系统差异")],-1),m=n("p",null,[n("strong",null,"并发编程下要遵守的并发相关的原则和规范")],-1),h={href:"http://www.cs.umd.edu/~pugh/java/memoryModel/CommunityReview.pdf",target:"_blank",rel:"noopener noreferrer"},v=a('<p>Java内存模型（Java Memory Model，简称JMM）定义了Java虚拟机如何管理Java程序中的内存，以及线程之间如何进行通信。JMM的目标是保证Java程序在任何平台上都能够正确地执行，不受各种硬件和操作系统的影响。</p><p>Java内存模型主要由以下三个部分组成：</p><ol><li><strong>内存访问规则（Memory Access Rules）</strong>：定义了Java程序中的变量在内存中的读取和写入规则，以及这些规则的可见性和原子性。</li><li><strong>线程之间的交互（Thread Interaction）</strong>：定义了线程之间如何进行通信以及如何协作，以保证Java程序的正确性。</li><li><strong>Happens-Before关系（Happens-Before Relationship）</strong>：定义了Java程序中不同操作之间的先后关系，以保证Java程序的正确性。</li></ol><p>在<strong>Java内存模型中</strong>，<strong>每个线程都有自己的工作内存</strong>，线程<strong>对变量的操作都是在工作内存中进行</strong>的。<strong>当线程需要读取共享变量的值时，需要从主内存中获取变量的值，当线程需要修改共享变量的值时，需要先在工作内存中修改变量的值，然后将修改后的值刷新到主内存中</strong>。JMM规定了读取和写入操作的顺序以及可见性和原子性的要求，以保证多个线程之间对共享变量的操作不会产生冲突和数据不一致的问题。</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230401000647251.png" alt="image-20230401000647251"></p><p>Happens-Before关系是Java内存模型中非常重要的一个概念，它用来保证Java程序中的操作按照一定的顺序执行。如果一个操作happens-before另一个操作，那么第一个操作的结果对于第二个操作是可见的。JMM规定了一些情况下的Happens-Before关系，例如线程的启动和结束，synchronized块的进入和退出等等。这些规定能够保证Java程序的正确性，避免出现一些奇怪的并发问题。</p><p><strong>逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序，其本质就是定义了一种 happens-before 关系。</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230401001125941.png" alt="image-20230401001125941"></p>',8),g=a(`<h3 id="memory-barrier" tabindex="-1"><a class="header-anchor" href="#memory-barrier" aria-hidden="true">#</a> Memory Barrier</h3><blockquote><p>在Java中，屏障（barrier）通常指的是内存屏障，它们用于控制内存访问的顺序以确保多线程程序的正确性和可见性。有读屏障、写屏障、通用屏障和优化屏障等不同类型的内存屏障。</p><p>这些屏障在Java中通常由编译器、虚拟机以及底层硬件来实现和管理，开发者在编写多线程程序时通常不需要直接操作这些屏障。相反，Java提供了高级的并发工具和关键字（例如<code>synchronized</code>和<code>volatile</code>）来帮助开发者编写线程安全的代码，而这些工具会隐含地使用内存屏障来确保正确的内存访问顺序和可见性。</p><p>对于处理器重排序,JMM的处理器重排序规则会要求Java编译器在生成指令序列时,插入特定类型的内存屏障(Memory Barriers,Intel称之为Memory Fence)指令,通过内存屏障指令来禁止特定类型的处理器重排序。</p></blockquote><blockquote><ol><li>读屏障（Read Barrier）： <ul><li>读屏障确保一个线程在读取变量的值之前，会从主内存中获取最新的值，而不是使用本地缓存中的旧值。</li><li>读屏障通常用于确保变量的可见性，防止出现脏读或不一致的数据访问。</li></ul></li><li>写屏障（Write Barrier）： <ul><li>写屏障用于确保一个线程在写入变量的值之后，将这个写操作刷新到主内存中，以便其他线程可以看到最新的值。</li><li>写屏障通常用于确保变量的可见性，防止写入操作被重排序或延迟。</li></ul></li><li>通用屏障（Full Barrier）： <ul><li>通用屏障是读屏障和写屏障的组合，它既确保一个线程在读取变量之前获取最新值，也确保在写入变量之后将写操作刷新到主内存。</li><li>通用屏障用于更严格的内存同步需求，例如在多线程之间建立 happens-before 关系。</li></ul></li><li>优化屏障（Optimization Barrier）： <ul><li>优化屏障通常是一种编译器或运行时系统的优化技术，用于防止编译器对指令重排序或优化过度，从而影响多线程程序的行为。</li><li>优化屏障有助于维护多线程程序的语义一致性，确保程序不会出现意外的结果。</li></ul></li></ol></blockquote><h3 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor" aria-hidden="true">#</a> Monitor</h3><blockquote><p><strong>Each object and its class are associated with a monitor.</strong></p></blockquote><blockquote><p>Java&#39;s monitor supports two kinds of thread synchronization: ==<em>mutual exclusion</em>== and ==<em>cooperation</em>==.</p><p>==<em>mutual exclusion</em>==, which is supported in the Java virtual machine via object locks, enables multiple threads to <strong>independently work on shared data without interfering with each other</strong>;<strong>only one thread can &quot;own&quot; at any one time.</strong></p><p>🔒每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针</p><p>==<em>cooperation</em>==, which is supported in the Java virtual machine via the ==wait== and ==notify== methods of class <code>Object</code>, <strong>enables threads to work together towards a common goal.</strong></p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>void wait();</code></td><td>Enter a monitor&#39;s wait set until notified by another thread<br>This method should <strong>only be called by</strong> a thread that is the <strong>owner of this object&#39;s monitor.</strong></td></tr><tr><td><code>void wait(long timeout); </code></td><td>Enter a monitor&#39;s wait set until notified by another thread or <code>timeout</code> milliseconds elapses</td></tr><tr><td><code>void wait(long timeout, int nanos); </code></td><td>Enter a monitor&#39;s wait set until notified by another thread or <code>timeout</code> milliseconds plus <code>nanos</code> nanoseconds elapses<br><strong>timeout</strong> – the maximum time to wait in milliseconds.<br><strong>nanos</strong> – additional time, in nanoseconds range 0-999999.</td></tr><tr><td><code>void notify();</code></td><td>Wake up one thread waiting in the monitor&#39;s wait set. (If no threads are waiting, do nothing.)</td></tr><tr><td><code>void notifyAll();</code></td><td>Wake up all threads waiting in the monitor&#39;s wait set. (If no threads are waiting, do nothing.)</td></tr></tbody></table></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210222837992.png" alt="image-20230210222837992"></p><blockquote><ul><li>刚开始 Monitor 中 Owner 为 null</li><li>（==上锁==）当 Thread-3 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-3，Monitor中只能有一个 Owner</li><li>在 Thread-3 上锁的过程中，如果 Thread-4，Thread-5，Thread-6 也来执行 synchronized(ObjectA)，就会进入 EntryList BLOCKED</li><li>（==解锁==）Thread-3 执行完同步代码块的内容会释放锁，将Owner置为null然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</li><li>图中 WaitSet 中的 Thread-1，Thread-2 是之前获得过锁，但条件不满足进入 WAITING 状态的线程</li></ul></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210133507494.png" alt="image-20230210133507494"></p><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> synchronized</h3><h4 id="synchronized底层实现" tabindex="-1"><a class="header-anchor" href="#synchronized底层实现" aria-hidden="true">#</a> synchronized底层实现</h4><blockquote><p><strong>当一个线程试图访问synchronized同步代码块或方法时</strong>，它首先<strong>必须得到锁</strong>;</p><p><strong>退出或抛出异常时必须释放锁</strong></p><p>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步</p><p><strong>代码块级别</strong>的 JVM中==monitorenter==和==monitorexit==字节码指令依赖于底层的操作系统的<strong>Mutex Lock</strong>来实现的</p><p><strong>方法级别</strong>的 synchronized 不会在字节码指令中有所体现</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//--------monitorenter</span>
	<span class="token comment">//critical section</span>
<span class="token punctuation">}</span><span class="token comment">//----------------------------monitorexit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="synchronized应用" tabindex="-1"><a class="header-anchor" href="#synchronized应用" aria-hidden="true">#</a> synchronized应用</h4><blockquote><p>==对象锁==</p><p>In the Java virtual machine, <strong>every object and class is logically associated with a ==monitor==.</strong></p><p>==类锁==</p><p>Class locks are actually implemented as object locks. As mentioned in earlier chapters, when the Java virtual machine loads a class file, it creates an instance of <code>class java.lang.Class.</code> When you lock a class, you are actually locking that class&#39;s Class object.</p></blockquote><p>==应用于方法上==</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对象锁 默认为this对象</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//类锁 默认的锁就是当前所在的Class类</span>
    <span class="token comment">/*Class locks are actually implemented as object locks. As mentioned in earlier chapters, when the Java virtual machine loads a class file, it creates an instance of class java.lang.Class. When you lock a class, you are actually locking that class&#39;s Class object. */</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==应用于代码块==</p><p>可以指定任意对象作为锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对象锁</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//类锁</span>
    <span class="token comment">/*Class locks are actually implemented as object locks. As mentioned in earlier chapters, when the Java virtual machine loads a class file, it creates an instance of class java.lang.Class. When you lock a class, you are actually locking that class&#39;s Class object. */</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="synchronized锁的升级" tabindex="-1"><a class="header-anchor" href="#synchronized锁的升级" aria-hidden="true">#</a> synchronized锁的升级</h4><blockquote><p>Java SE 1.6里Synchronied同步锁，一共有四种状态：<code>无锁</code>、<code>偏向锁</code>、<code>轻量级锁</code>、<code>重量级锁</code>，它会<strong>随着竞争</strong>情况<strong>逐渐升级</strong>。锁可以升级但是<strong>不可以降级</strong>，</p><p>目的是为了<strong>提高获取锁和释放锁的效率</strong>。</p><p>可以通过-XX:-UseBiasedLocking=false来禁用偏向锁。</p><p>锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁 (此过程是不可逆的)</p></blockquote><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要CAS操作，没有额外的性能消耗，和执行非同步方法相比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块的场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了响应速度</td><td>如线程始终得不到锁竞争的线程，使用自旋会消耗CPU性能</td><td>追求响应时间，同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不适用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢，在多线程下，频繁的获取释放锁，会带来巨大的性能消耗</td><td>追求吞吐量，同步块执行速度较长</td></tr></tbody></table><h5 id="偏向锁" tabindex="-1"><a class="header-anchor" href="#偏向锁" aria-hidden="true">#</a> 偏向锁</h5><blockquote><p>引入背景：在大多实际环境下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获取，那么在同一个线程反复获取所释放锁中，其中并还没有锁的竞争，那么这样看上去，多次的获取锁和释放锁带来了很多不必要的性能开销和上下文切换。</p><p><strong>偏向锁</strong>。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁。只需要简单的测试一下对象头的<code>Mark Word</code>里是否存储着指向当前线程的偏向锁。如果成功，表示线程已经获取到了锁；如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程</p><p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p><p>偏向是类偏向（整个类的对象可偏向或整个类的对象不可偏向）</p><p><strong>偏向锁的撤销</strong></p><p>偏向锁使用了一种等待竞争出现才会释放锁的机制。所以当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。但是偏向锁的撤销需要等到全局安全点(就是当前线程没有正在执行的字节码)。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着。如果线程不处于活动状态，直接将对象头设置为无锁状态。如果线程活着，JVM会遍历栈帧中的锁记录，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁。</p><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 【-XX:BiasedLockingStartupDelay=0 】来禁用延迟</p><p><strong>几种会使偏向锁失效（撤销）的情况</strong></p><ul><li>调用对象 hashCode</li><li>-XX:-UseBiasedLocking</li><li>当其他线程尝试获取偏向锁时；竞争出现</li><li>调用wait/notify</li></ul><p><strong>批量重偏向</strong></p><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程</p><p><strong>批量撤销</strong></p><p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是<strong>整个类的所有对象都会变为不可偏向的</strong>，新建的对象也是不可偏向的</p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211204001023.png" alt="image-20230211204001023"></p><h5 id="轻量级锁" tabindex="-1"><a class="header-anchor" href="#轻量级锁" aria-hidden="true">#</a> 轻量级锁</h5><blockquote><p>如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化</p><p><strong>轻量级锁加锁</strong></p><p>在线程执行同步块之前，JVM会先在当前线程的栈帧中创建一个名为锁记录(<code>Lock Record</code>)的空间，用于存储锁对象目前的<code>Mark Word</code>的拷贝(JVM会将对象头中的<code>Mark Word</code>拷贝到锁记录中，官方称为<code>Displaced Mark Ward</code>)</p><p>创建锁记录（Lock Record）对象，每个线程的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word 让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</p><ul><li><p>成功：cas 替换成功，对象头中存储了锁记录地址和状态 00 ，表示由该线程给对象加锁</p></li><li><p>失败:</p><p>①自己执行了synchronized锁重入，添加一条Lock Record记录作为重入计数</p><p>②其他线程已经持有了该对象Object的轻量级锁；表明存在竞争，锁进入膨胀状态（重量级锁）</p><p>​ 为Object对象申请Monitor锁，让Object（mark mord）指向重量级锁地址（monitor）；然后自己进入Monitor的Entry Set队列中阻塞</p></li></ul><p><strong>轻量级锁解锁</strong></p><ul><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p></li><li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p><p>①解锁成功</p><p>②轻量级锁进行了锁膨胀升级为重量级锁；进入重量级锁的解锁方式 按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</p></li></ul></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211213238099.png" alt="image-20230211213238099"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211213902673.png" alt="image-20230211213902673"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211214340673.png" alt="image-20230211214340673"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211214535858.png" alt="image-20230211214535858"></p><h5 id="自旋锁与自适应自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁与自适应自旋锁" aria-hidden="true">#</a> 自旋锁与自适应自旋锁</h5><blockquote><p>==自旋==</p><p>在<strong>挂起线程和恢复线程的操作</strong>都需要转入<strong>内核态中完成</strong>，这些操作对系统的并发性能带来了很大的压力<strong>影响并发性</strong>。同时HotSpot团队注意到在很多情况下，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和回复阻塞线程并不值得。在如今多处理器环境下，完全可以让另一个没有获取到锁的线程在门外等待一会(自旋)，但不放弃CPU的执行时间。等待持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需要让线程执行一个忙循环(自旋)</p><ul><li><p><strong>自旋优势</strong> 自旋锁本质上与阻塞并不相同，先不考虑其对多处理器的要求，如果锁占用的时间非常的短，那么自旋锁的性能会非常的好</p></li><li><p><strong>自旋弊端</strong> 在线程自旋时，始终会占用CPU的时间片，如果锁占用的时间太长，那么自旋的线程会白白消耗掉CPU资源</p></li></ul><p>自旋等待的时间必须要有一定的限度，如果自旋超过了限定的次数仍然没有成功获取到锁，就应该使用传统的方式去挂起线程了，在JDK定义中，自旋锁默认的自旋次数为10次，用户可以使用参数<code>-XX:PreBlockSpin</code>来更改</p><p>==自适应自旋==</p><p>在JDK 1.6中引入了自适应自旋锁。这就意味着<strong>自旋的时间不再固定</strong>了，而是<strong>由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定</strong>的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到100此循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，JVM对程序的锁的状态预测会越来越准确，JVM也会越来越聪明</p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230211220538224.png" alt="image-20230211220538224"></p><h5 id="重量级锁-锁膨胀" tabindex="-1"><a class="header-anchor" href="#重量级锁-锁膨胀" aria-hidden="true">#</a> 重量级锁（锁膨胀）</h5><blockquote><p>🔒每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针</p><ul><li>刚开始 Monitor 中 Owner 为 null</li><li>（==上锁==）当 Thread-3 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-3，Monitor中只能有一个 Owner</li><li>在 Thread-3 上锁的过程中，如果 Thread-4，Thread-5，Thread-6 也来执行 synchronized(ObjectA)，就会进入 EntryList BLOCKED</li><li>（==解锁==）Thread-3 执行完同步代码块的内容会释放锁，将Owner置为null然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</li><li>图中 WaitSet 中的 Thread-1，Thread-2 是之前获得过锁，但条件不满足进入 WAITING 状态的线程</li></ul></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230210222837992.png" alt="image-20230210222837992"></p><h5 id="锁消除-同步省略" tabindex="-1"><a class="header-anchor" href="#锁消除-同步省略" aria-hidden="true">#</a> 锁消除（同步省略）</h5><blockquote><p>锁消除是指虚拟机即时编译器再运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。</p><p>锁消除的主要判定依据来源于==逃逸分析==的数据支持。意思就是：JVM会判断再一段程序中的同步明显不会逃逸出去从而被其他线程访问到，那JVM就把它们当作栈上数据对待，<strong>认为这些数据是线程独有的，不需要加同步。此时就会进行锁消除</strong></p></blockquote><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h3><blockquote><p>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</p><p><code>volatile</code> 关键字可以<strong>保证变量可见性</strong>.</p><p>如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，<strong>每次使用</strong>它<strong>都到主存中进行读取</strong></p><p>比synchronized的使用和执行成本更低，因为它不会引起线程上下文的切换和调度。</p><p>==可见性==volatile <strong>变量</strong>的内存可见性是基于<strong>内存屏障(Memory Barrier)</strong>:又称内存栅栏，是一个 CPU 指令。</p><ul><li>对 volatile 变量的写指令后会加入写屏障 写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</li><li>对 volatile 变量的读指令前会加入读屏障 读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</li></ul><p>==有序性==volatile 有序性实现volatile 的 <strong>happens-before 关系</strong></p><ul><li>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</li><li>volatile <strong>禁止重排序</strong> 写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后 读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ul></blockquote><h3 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h3><blockquote><p>ThreadLocal是一个将<strong>在多线程中为每一个线程创建单独的变量副本的类</strong>; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, <strong>做到线程隔离</strong>，避免因多线程操作共享变量而导致的数据不一致的情况。<strong>避免了出现线程安全问题</strong>。</p><p>使用后记得调用ThreadLocal的(<code>remove(ThreadLocal&lt;?&gt; key)</code>)方法清除Entry即可<strong>避免内存泄露</strong>。</p><p>如果你创建了⼀个ThreadLocal 变量，那么访问这个变量的每个线程都会有这个变量的本地副本。可以将ThreadLocal 类形象的⽐喻成存放数据的盒⼦，盒⼦中可以存储每个线程的私有数据。</p><p>看过代码之后就很清晰的知道了为什么ThreadLocal能够实现变量的多线程隔离了; 其实就是用了Map的数据结构给当前线程缓存了, 要使用的时候就从本线程的threadLocals对象中获取就可以了, key就是当前线程;</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230510090357356.png" alt="image-20230510090357356"></p><p>当然了在当前线程下获取当前线程里面的Map里面的对象并操作肯定没有线程并发问题了, 当然能做到变量的线程间隔离了;</p></blockquote><p><strong>内部维护的是⼀个类似 Map 的==ThreadLocalMap== 数据结构</strong></p><blockquote><p>本质上来讲, 它就是一个Map, 但是这个ThreadLocalMap与我们平时见到的Map有点不一样</p><ul><li>它没有实现Map接口;</li><li>它没有public的方法, 最多有一个default的构造方法, 因为这个ThreadLocalMap的方法仅仅在ThreadLocal类中调用, 属于静态内部类</li><li>ThreadLocalMap的Entry实现继承了WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</li><li>该方法仅仅用了一个Entry数组来存储Key, Value; Entry并不是链表形式, 而是每个bucket里面仅仅放一个Entry;</li></ul></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230217100050423.png" alt="image-20230217100050423"></p><blockquote><p>ThreadLocal 内部维护的是⼀个类似 Map 的ThreadLocalMap 数据结构（ThreadLocalMap是ThreadLocal的静态内部类）， key 为当前对象的 Thread 对象（当前线程对象），值为 Object 对象。</p></blockquote><blockquote><p>最终的变量是放在了当前线程的 ThreadLocalMap 中（相当于当前线程维护了一个单独的变量副本，做到线程隔离），并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap 的封装，传递了变量值。</p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230217095849182.png" alt="image-20230217095849182"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230217095515091.png" alt="image-20230217095515091"></p><h4 id="threadlocal内存泄露" tabindex="-1"><a class="header-anchor" href="#threadlocal内存泄露" aria-hidden="true">#</a> ThreadLocal内存泄露</h4><blockquote><p><strong>ThreadLocalMap使用ThreadLocal的弱引用作为key</strong></p><p>如果一个ThreadLocal没有外部强引用来引用它，那么系统 GC 的时候，这个ThreadLocal势必会被回收，<strong>这样一来，ThreadLocalMap中就会出现key为null的Entry</strong>，就没有办法访问这些key为null的Entry的value，<strong>如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value永远无法回收，造成内存泄漏。</strong></p><ul><li><p>使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致的内存泄漏</p></li><li><p>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏</p></li></ul><p>对症下药，<strong>每次使用完ThreadLocal调用<code>remove()</code>方法清理掉</strong>就行了</p><h3 id="为什么使用弱引用" tabindex="-1"><a class="header-anchor" href="#为什么使用弱引用" aria-hidden="true">#</a> 为什么使用弱引用？</h3><ol><li>如果使用强引用：我们知道，ThreadLocalMap的生命周期基本和Thread的生命周期一样，当前线程如果没有终止，那么ThreadLocalMap始终不会被GC回收，而ThreadLocalMap持有对ThreadLocal的强引用，那么ThreadLocal也不会被回收，当线程生命周期长，如果没有手动删除，则会造成kv累积，从而导致OOM</li><li>如果使用弱引用：弱引用中的对象具有很短的声明周期，因为在系统GC时，只要发现弱引用，不管堆空间是否足够，都会将对象进行回收。而当ThreadLocal的强引用被回收时，ThreadLocalMap所持有的弱引用也会被回收，如果没有手动删除kv，那么会造成value累积，也会导致OOM</li></ol><p>对比可知，使用<strong>弱引用至少可以保证不会因为map的key累积从而导致OOM</strong>，而<strong>对应的value可以通过remove，get，set方法在下一次调用时被清除</strong>。可见，内存泄露的根源不是弱引用，而是ThreadLocalMap的生命周期和Thread一样长，造成累积导致的</p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230414171941718.png" alt="image-20230414171941718"></p><h2 id="juc-java-util-concurrency" tabindex="-1"><a class="header-anchor" href="#juc-java-util-concurrency" aria-hidden="true">#</a> JUC(Java Util Concurrency)</h2><h3 id="abstractqueuedsynchronizer" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer" aria-hidden="true">#</a> AbstractQueuedSynchronizer</h3><blockquote><p>AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器。</p><p>ReentrantLock，Semaphore，ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的.</p><p>Concurrent包是基于AQS (AbstractQueuedSynchronizer)框架的，AQS框架借助于两个类：</p><ul><li>Unsafe（提供CAS操作）</li><li>LockSupport（提供park/unpark操作）</li></ul></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230424135301680.png" alt="image-20230424135301680"></p><h4 id="aqs核心思想" tabindex="-1"><a class="header-anchor" href="#aqs核心思想" aria-hidden="true">#</a> <strong>AQS核心思想</strong></h4><blockquote><p>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。</p><p>如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制。</p><p>这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p></blockquote><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230424140729677.png" alt="image-20230424140729677"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230424140337398.png" alt="image-20230424140337398"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230801112058245.png" alt="image-20230801112058245"></p><h4 id="aqs结构" tabindex="-1"><a class="header-anchor" href="#aqs结构" aria-hidden="true">#</a> AQS结构</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>

<span class="token comment">// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>

<span class="token comment">// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁</span>
<span class="token comment">// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>

<span class="token comment">// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入</span>
<span class="token comment">// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁</span>
<span class="token comment">// if (currentThread == getExclusiveOwnerThread()) {state++}</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Thread</span> exclusiveOwnerThread<span class="token punctuation">;</span> <span class="token comment">//继承自AbstractOwnableSynchronizer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-线程池" tabindex="-1"><a class="header-anchor" href="#java-线程池" aria-hidden="true">#</a> Java 线程池</h3><p><strong>池化技术的思想</strong>主要是为了<strong>减少每次获取资源的消耗</strong>，<strong>提高对资源的利用率</strong></p><ul><li><p>==<strong>降低资源消耗</strong>==。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li><p>==<strong>提高响应速度</strong>==。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p></li><li><p>==<strong>提高线程的可管理性</strong>==。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p></li></ul><h3 id="线程池原理分析" tabindex="-1"><a class="header-anchor" href="#线程池原理分析" aria-hidden="true">#</a> 线程池原理分析</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204232022514.png" alt="image-20230204232022514"></p><p><strong>线程池主要处理流程</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204231928198.png" alt="image-20230204231928198"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1）如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤
需要获取全局锁）。
2）如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。
3）如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执
行这一步骤需要获取全局锁）。
4）如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用
RejectedExecutionHandler.rejectedExecution()方法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204232431709.png" alt="image-20230204232431709"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token constant">CAPACITY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果任务为null，则抛出异常。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ctl 中保存的线程池当前的一些状态信息</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//  下面会涉及到 3 步 操作</span>
        <span class="token comment">// 1.首先判断当前线程池中执行的任务数量是否小于 corePoolSize</span>
        <span class="token comment">// 如果小于的话，通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.如果当前执行的任务数量大于等于 corePoolSize 的时候就会走到这里</span>
        <span class="token comment">// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态并且队列可以加入任务，该任务才会被加入进去</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果当前线程池为空就新创建一个线程并执行。</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//3. 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span>
        <span class="token comment">//如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="executor-框架" tabindex="-1"><a class="header-anchor" href="#executor-框架" aria-hidden="true">#</a> Executor 框架</h3><p><code>Executor</code> 框架是 Java5 之后引进的，在 Java 5 之后，通过 <code>Executor</code> 来启动线程比使用 <code>Thread</code> 的 <code>start</code> 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题。</p><blockquote><p>补充：this 逃逸是指在构造函数返回之前其他线程就持有该对象的引用. 调用尚未构造完全的对象的方法可能引发令人疑惑的错误。</p></blockquote><p><code>Executor</code> 框架不仅包括了线程池的管理，还提供了线程工厂、队列以及拒绝策略等，<code>Executor</code> 框架让并发编程变得更加简单。</p><h4 id="executor-框架结构-三大部分组成" tabindex="-1"><a class="header-anchor" href="#executor-框架结构-三大部分组成" aria-hidden="true">#</a> Executor 框架结构(三大部分组成)</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230205000128358.png" alt="image-20230205000128358"></p><ul><li>任务(<code>Runnable</code> /<code>Callable</code>)</li><li>任务的执行(<code>Executor</code>)</li><li>异步计算的结果(<code>Future</code>)</li></ul><ol><li><strong>主线程首先要创建实现 <code>Runnable</code> 或者 <code>Callable</code> 接口的任务对象。</strong></li><li><strong>把创建完成的实现 <code>Runnable</code>/<code>Callable</code>接口的 对象直接交给 <code>ExecutorService</code> 执行</strong>: <code>ExecutorService.execute（Runnable command）</code>）或者也可以把 <code>Runnable</code> 对象或<code>Callable</code> 对象提交给 <code>ExecutorService</code> 执行（<code>ExecutorService.submit（Runnable task）</code>或 <code>ExecutorService.submit（Callable &lt;T&gt; task）</code>）。</li><li><strong>如果执行 <code>ExecutorService.submit（…）</code>，<code>ExecutorService</code> 将返回一个实现<code>Future</code>接口的对象</strong>（我们刚刚也提到过了执行 <code>execute()</code>方法和 <code>submit()</code>方法的区别，<code>submit()</code>会返回一个 <code>FutureTask 对象）。由于 FutureTask</code> 实现了 <code>Runnable</code>，我们也可以创建 <code>FutureTask</code>，然后直接交给 <code>ExecutorService</code> 执行。</li><li><strong>最后，主线程可以执行 <code>FutureTask.get()</code>方法来等待任务执行完成。主线程也可以执行 <code>FutureTask.cancel（boolean mayInterruptIfRunning）</code>来取消此任务的执行。</strong></li></ol><h5 id="任务-runnable-callable" tabindex="-1"><a class="header-anchor" href="#任务-runnable-callable" aria-hidden="true">#</a> 任务(<code>Runnable</code> /<code>Callable</code>)</h5><p>执行任务需要实现的 <strong><code>Runnable</code> 接口</strong> 或 <strong><code>Callable</code>接口</strong>。<strong><code>Runnable</code> 接口</strong>或 <strong><code>Callable</code> 接口</strong> 实现类都可以被 <strong><code>ThreadPoolExecutor</code></strong> 或 <strong><code>ScheduledThreadPoolExecutor</code></strong> 执行。</p><h5 id="任务的执行-executor" tabindex="-1"><a class="header-anchor" href="#任务的执行-executor" aria-hidden="true">#</a> 任务的执行(<code>Executor</code>)</h5><p>任务执行机制的核心接口 <strong><code>Executor</code></strong> ，以及继承自 <code>Executor</code> 接口的 <strong><code>ExecutorService</code> 接口。</strong></p><p><strong><code>ThreadPoolExecutor</code></strong> 和</p><p><strong><code>ScheduledThreadPoolExecutor</code></strong></p><p>这两个关键类实现了 <strong>ExecutorService 接口</strong>。</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230205000754985.png" alt="image-20230205000754985"></p><h5 id="异步计算的结果-future" tabindex="-1"><a class="header-anchor" href="#异步计算的结果-future" aria-hidden="true">#</a> 异步计算的结果(<code>Future</code>)</h5><p><strong><code>Future</code></strong> 接口以及 <code>Future</code> 接口的实现类 <strong><code>FutureTask</code></strong> 类都可以代表异步计算的结果。</p><p>当我们把 <strong><code>Runnable</code>接口</strong> 或 <strong><code>Callable</code> 接口</strong> 的实现类提交给 <strong><code>ThreadPoolExecutor</code></strong> 或 <strong><code>ScheduledThreadPoolExecutor</code></strong> 执行。（调用 <code>submit()</code> 方法时会返回一个 <strong><code>FutureTask</code></strong> 对象）</p><h4 id="executors工具类" tabindex="-1"><a class="header-anchor" href="#executors工具类" aria-hidden="true">#</a> Executors工具类</h4><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></blockquote><p>另外，《阿里巴巴 Java 开发手册》中<strong>强制</strong>线程池<strong>不允许使用</strong> <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p><strong>通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来实现</strong> 我们可以创建三种类型的 <code>ThreadPoolExecutor</code>：</p><ul><li><code>FixedThreadPool</code></li><li><code>SingleThreadExecutor</code></li><li><code>CachedThreadPool</code></li></ul><h3 id="threadpoolexecutor★" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor★" aria-hidden="true">#</a> ThreadPoolExecutor★</h3><blockquote><p><strong>线程池实现类 <code>ThreadPoolExecutor</code> 是 <code>Executor</code> 框架最核心的类</strong></p><p><strong>推荐使用 <code>ThreadPoolExecutor</code> 构造函数创建线程池</strong></p><p>Parameters：</p><ul><li><strong>int corePoolSize,//核心线程数</strong></li><li><strong>int maximumPoolSize,//线程池中最大线程数</strong></li><li><strong>long keepAliveTime,//线程池中非核心空闲线程的存活时间</strong></li><li>TimeUnit unit,//存活时间单位</li><li>BlockingQueue workQueue,//阻塞队列</li><li>ThreadFactory threadFactory,//线程工厂</li><li>RejectedExecutionHandler handler//拒接策略</li></ul></blockquote><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p><ul><li><p><strong><code>corePoolSize</code></strong> : 核心线程数线程数定义了最小可以同时运行的线程数量。</p></li><li><p><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p></li><li><p><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。<strong>阻塞队列</strong></p><ul><li><code>ArrayBlockingQueue</code>：是一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序</li><li><code>LinkedBlockingQueue</code>：一个基于链表结构的<strong>默认无界</strong>的（可选有界）阻塞队列，此队列按FIFO排序元素，<strong>吞吐量通常要高于ArrayBlockingQueue</strong>。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</li><li><code>SynchronousQueue</code>：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，<strong>吞吐量通常要高于Linked-BlockingQueue</strong>，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</li><li><code>PriorityBlockingQueue</code>：一个具<strong>有优先级的无限阻塞队列</strong>。</li></ul><blockquote><p>在Java线程池中，不同的阻塞队列有不同的使用场景。例如，</p><ul><li>ArrayBlockingQueue适用于任务量比较小的情况，</li><li>而LinkedBlockingQueue适用于任务量比较大的情况，因为它可以自动扩容。</li><li>SynchronousQueue适用于生产者和消费者速度相同的情况，</li><li>而PriorityBlockingQueue则适用于需要对任务进行优先级排序的情况。</li></ul></blockquote></li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ol><li><p><strong><code>keepAliveTime</code></strong>:当线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，线程池中且核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁；(<strong>线程池中且核心线程外的线程空闲后，保持存活的时间</strong>)</p></li><li><p><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</p></li><li><p><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</p></li><li><p><strong><code>handler</code></strong> :饱和(拒绝)策略。关于饱和策略下面单独介绍一下。<strong><code>ThreadPoolExecutor</code> 饱和策略定义:</strong></p><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p><ul><li><code>ThreadPoolExecutor.AbortPolicy</code> ：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。(<strong>抛异常</strong>)</li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code> ：<strong>用调用者所在线程来运行任务(直接执行run方法不启动新线程)</strong>;调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li><li><code>ThreadPoolExecutor.DiscardPolicy</code> ：不处理新任务，直接丢弃掉。(<strong>丢弃新任务</strong>)</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code> ： 此策略将丢弃最早的未处理的任务请求。（<strong>丢弃老任务</strong>）</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 用给定的初始参数创建一个新的ThreadPoolExecutor。
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment">//线程池的核心线程数量</span>
                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment">//线程池的最大线程数</span>
                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment">//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span>
                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span><span class="token comment">//时间单位</span>
                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span><span class="token comment">//任务队列，用来储存等待执行任务的队列</span>
                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span><span class="token comment">//线程工厂，用来创建线程，一般默认即可</span>
                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token comment">//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span>
                               <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>
            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>
            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204232022514.png" alt="image-20230204232022514"></p><h4 id="创建线程池" tabindex="-1"><a class="header-anchor" href="#创建线程池" aria-hidden="true">#</a> 创建线程池</h4><h5 id="方式一-通过threadpoolexecutor构造函数实现-推荐" tabindex="-1"><a class="header-anchor" href="#方式一-通过threadpoolexecutor构造函数实现-推荐" aria-hidden="true">#</a> <strong>方式一：通过<code>ThreadPoolExecutor</code>构造函数实现（推荐）</strong></h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 <span class="token keyword">@author</span> EddieZhang
 @create 2023-02-05 12:36 AM
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//核心线程数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//线程池中最大线程数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUEUE_CAPACITY</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//阻塞队列的最大容量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">KEEP_ALIVE_TIME</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">//线程池中非核心空闲线程的存活时间</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * (
         *  int corePoolSize,//核心线程数
         *  int maximumPoolSize,//线程池中最大线程数
         *  long keepAliveTime,//线程池中非核心空闲线程的存活时间
         *  TimeUnit unit,//存活时间单位
         *  BlockingQueue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Runnable</span><span class="token punctuation">&gt;</span></span> workQueue,//阻塞队列
         *  ThreadFactory threadFactory,//线程工厂
         *  RejectedExecutionHandler handler//拒接策略
         *  )
         */</span>
        <span class="token comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span>
        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor<span class="token punctuation">;</span>
        threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">MAX_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token number">5</span><span class="token punctuation">,</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">QUEUE_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Runnable</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这里是通过实现Runnable接口启动的新线程:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//关闭线程池</span>
        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//未将线程池关闭则死循环直至线程池关闭成功</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方式二-通过-executor-框架的工具类-executors-来实现-我们可以创建三种类型的-threadpoolexecutor-不推荐-存在资源耗尽的风险" tabindex="-1"><a class="header-anchor" href="#方式二-通过-executor-框架的工具类-executors-来实现-我们可以创建三种类型的-threadpoolexecutor-不推荐-存在资源耗尽的风险" aria-hidden="true">#</a> <strong>方式二：通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来实现</strong> 我们可以创建三种类型的 <code>ThreadPoolExecutor</code>（<strong>不推荐</strong>；存在资源耗尽的风险）</h5><h4 id="向线程池中提交任务" tabindex="-1"><a class="header-anchor" href="#向线程池中提交任务" aria-hidden="true">#</a> 向线程池中提交任务</h4><p>可以使用两个方法向线程池提交任务，分别为<code>execute()</code>和<code>submit()</code>方法。</p><p><code>execute()</code>方法<strong>用于提交不需要返回值的任务</strong>，所以<strong>无法判断任务是否被线程池执行成功</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>submit()</code>方法用于<strong>提交需要返回值的任务</strong>。线程池<strong>会返回一个<code>future</code>类型的对象</strong>，通过这个future对象可以判断任务是否执行成功，并且<strong>可以通过future的get()方法来获取返回值</strong>，<strong><code>get()</code>方法会阻塞当前线程直到任务完成</strong>，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="关闭线程池" tabindex="-1"><a class="header-anchor" href="#关闭线程池" aria-hidden="true">#</a> 关闭线程池</h4><p>可以通过调用线程池的<code>shutdown()</code>或<code>shutdownNow()</code>方法来关闭线程池</p><ul><li><p><strong><code>shutdown（）</code></strong> :关闭线程池，线程池的状态变为 <code>SHUTDOWN</code>。线程池不再接受新任务了，但是队列里的任务得执行完毕。</p></li><li><p><strong><code>shutdownNow（）</code></strong> :关闭线程池，线程的状态变为 <code>STOP</code>。线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List。</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//线程池不再接受新任务了，但是队列里的任务得执行完毕。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的<strong>原理</strong>是<strong>遍历线程池中的工作线程</strong>，然后<strong>逐个调用线程的interrupt方法来中断线程</strong>，所以<strong>无法响应中断的任务可能永远无法终止</strong>。</p><p>只要调用了这两个关闭方法中的任意一个，<code>isShutdown()</code>方法就会<strong>返回true</strong>。</p><p>当<strong>所有的任务都已关闭后</strong>，才表示<strong>线程池关闭成功</strong>，这时调用<code>isTerminaed()</code>方法会<strong>返回true</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">//关闭线程池</span>
        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//未将线程池关闭则死循环直至线程池关闭成功</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="几种常见的线程池" tabindex="-1"><a class="header-anchor" href="#几种常见的线程池" aria-hidden="true">#</a> 几种常见的线程池</h4><h5 id="fixedthreadpool" tabindex="-1"><a class="header-anchor" href="#fixedthreadpool" aria-hidden="true">#</a> FixedThreadPool</h5><p><code>FixedThreadPool</code> 被称为<strong>可重用固定线程数</strong>的线程池。</p><p>源码可以看出新创建的 <code>FixedThreadPool</code> 的 <code>corePoolSize</code> 和 <code>maximumPoolSize</code> 都被设置为 <strong>nThreads</strong>，这个 nThreads 参数是我们使用的时候自己传递的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     * 创建一个可重用固定数量线程的线程池
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                      <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果当前运行的线程数小于 corePoolSize， 如果再来新任务的话，就创建新的线程来执行任务；</p></li><li><p>当前运行的线程数等于 corePoolSize 后， 如果再来新任务的话，会将任务加入 <code>LinkedBlockingQueue</code>；</p></li><li><p>线程池中的线程执行完 手头的任务后，会在循环中反复从 <code>LinkedBlockingQueue</code> 中获取任务来执行；</p></li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230205144649029.png" alt="image-20230205144649029"></p><p><strong>为什么不推荐使用<code>FixedThreadPool</code>？</strong></p><p><strong><code>FixedThreadPool</code> 使用无界队列 <code>LinkedBlockingQueue</code>（队列的容量为 Integer.MAX_VALUE）作为线程池的工作队列会对线程池带来如下影响 ：</strong></p><ol><li>当线程池中的线程数达到 <code>corePoolSize</code> 后，新任务将在无界队列中等待，因此线程池中的线程数不会超过 corePoolSize；</li><li>由于使用无界队列时 <code>maximumPoolSize</code> 将是一个无效参数，因为不可能存在任务队列满的情况。所以，通过创建 <code>FixedThreadPool</code>的源码可以看出创建的 <code>FixedThreadPool</code> 的 <code>corePoolSize</code> 和 <code>maximumPoolSize</code> 被设置为同一个值。</li><li>由于 1 和 2，使用无界队列时 <code>keepAliveTime</code> 将是一个无效参数；</li><li>运行中的 <code>FixedThreadPool</code>（未执行 <code>shutdown()</code>或 <code>shutdownNow()</code>）不会拒绝任务，在任务比较多的时候<strong>会导致 OOM（内存溢出）</strong>。</li></ol><h5 id="singlethreadexecutor" tabindex="-1"><a class="header-anchor" href="#singlethreadexecutor" aria-hidden="true">#</a> SingleThreadExecutor</h5><p><code>SingleThreadExecutor</code> 是<strong>只有一个线程的线程池</strong></p><p>源代码可以看出新创建的 <code>SingleThreadExecutor</code> 的 <code>corePoolSize</code> 和 <code>maximumPoolSize</code> <strong>都被设置为 1</strong>.其他参数和 <code>FixedThreadPool</code> 相同</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     *返回只有一个线程的线程池
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>
            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                    <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    threadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果当前运行的线程数少于 <code>corePoolSize</code>，则创建一个新的线程执行任务；</p></li><li><p>当前线程池中有一个运行的线程后，将任务加入 <code>LinkedBlockingQueue</code></p></li><li><p>线程执行完当前的任务后，会在循环中反复从<code>LinkedBlockingQueue</code> 中获取任务来执行</p></li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230205144906373.png" alt="image-20230205144906373"></p><p><strong>为什么不推荐使用<code>SingleThreadExecutor</code>？</strong></p><p><code>SingleThreadExecutor</code> <strong>使用无界队列</strong> <code>LinkedBlockingQueue</code> 作为线程池的工作队列（队列的容量为 Intger.MAX_VALUE）。<code>SingleThreadExecutor</code> 使用无界队列作为线程池的工作队列会对线程池带来的影响与 <code>FixedThreadPool</code> 相同。说简单点就是<strong>可能会导致 OOM</strong>，</p><h5 id="cachedthreadpool" tabindex="-1"><a class="header-anchor" href="#cachedthreadpool" aria-hidden="true">#</a> CachedThreadPool</h5><p><code>CachedThreadPool</code> 是一个会根<strong>据需要创建新线程</strong>的线程池</p><p><code>CachedThreadPool</code> 的<code>corePoolSize</code> 被设置为空（0），<code>maximumPoolSize</code>被设置为 <code>Integer.MAX.VALUE</code>，即<strong>最大线程数是无界</strong>的，这也就意味着如果主线程提交任务的速度高于 <code>maximumPool</code> 中线程处理任务的速度时，<code>CachedThreadPool</code> 会不断创建新的线程。极端情况下，这样会导致耗尽 cpu 和内存资源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     * 创建一个线程池，根据需要创建新线程，但会在先前构建的线程可用时重用它。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>
                                      <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先执行 <code>SynchronousQueue.offer(Runnable task)</code> 提交任务到任务队列。如果当前 <code>maximumPool</code> 中有闲线程正在执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code>，那么主线程执行 offer 操作与空闲线程执行的 <code>poll</code> 操作配对成功，主线程把任务交给空闲线程执行，<code>execute()</code>方法执行完成，否则执行下面的步骤 2；</li><li>当初始 <code>maximumPool</code> 为空，或者 <code>maximumPool</code> 中没有空闲线程时，将没有线程执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code>。这种情况下，步骤 1 将失败，此时 <code>CachedThreadPool</code> 会创建新线程执行任务，execute 方法执行完成；</li></ol><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230205145227932.png" alt="image-20230205145227932"></p><p><strong>为什么不推荐使用<code>CachedThreadPool</code>？</strong></p><p><code>CachedThreadPool</code>允许创建的线程数量为 <code>Integer.MAX_VALUE</code> ，<strong>可能会创建大量线程</strong>，从而<strong>导致 OOM</strong></p><h5 id="scheduledthreadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#scheduledthreadpoolexecutor" aria-hidden="true">#</a> ScheduledThreadPoolExecutor</h5><p><strong><code>ScheduledThreadPoolExecutor</code> 主要用来在给定的延迟后运行任务，或者定期执行任务。</strong> 这个在实际项目中基本不会被用到，<strong>也不推荐使用</strong>，大家只需要简单了解一下它的思想即可</p><h4 id="合理地配置线程池" tabindex="-1"><a class="header-anchor" href="#合理地配置线程池" aria-hidden="true">#</a> 合理地配置线程池</h4><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。</p><ul><li>任务的性质：<strong>CPU密集型任务</strong>、<strong>IO密集型任务</strong>和混合型任务。</li><li>任务的优先级：高、中和低。</li><li>任务的执行时间：长、中和短。</li><li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li></ul><p>有一个简单并且适用面比较广的<strong>经验之谈</strong>：</p><ul><li><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</li><li><strong>I/O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</li></ul><p><strong>如何判断是 CPU 密集任务还是 IO 密集任务？</strong></p><p>CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p><h4 id="线程池的监控" tabindex="-1"><a class="header-anchor" href="#线程池的监控" aria-hidden="true">#</a> 线程池的监控</h4><p>监控线程池的时候可以使用以下属性。</p><ul><li><code>taskCount</code>：线程池需要执行的任务数量。</li><li><code>completedTaskCount</code>：线程池在运行过程中已完成的任务数量，小于或等于taskCount。</li><li><code>largestPoolSize</code>：线程池里曾经创建过的最大线程数量。通过这个数据可以知道线程池是否曾经满过。如该数值等于线程池的最大大小，则表示线程池曾经满过。</li><li><code>getPoolSize</code>：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个大小只增不减。</li><li><code>getActiveCount</code>：获取活动的线程数。</li></ul><p>通过扩展线程池进行监控。可以通过<strong>继承线程池来自定义线程池</strong>，<strong>重写线程池</strong>的<code>beforeExecute</code>、<code>afterExecute</code>和<code>terminated</code>方法，也可以在任务执行前、执行后和线程池关闭前执行一些代码来进行监控。例如，监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。</p><h3 id="completablefuture异步编程" tabindex="-1"><a class="header-anchor" href="#completablefuture异步编程" aria-hidden="true">#</a> CompletableFuture异步编程</h3><p>Java 8 才被引入的一个非常有用的用于<strong>异步编程的类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Future接口</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204223419774.png" alt="image-20230204223419774"></p><ul><li><p>boolean <code>cancel(boolean mayInterruptIfRunning)</code> ：尝试取消执行任务。</p></li><li><p>boolean <code>isCancelled()</code> ：判断任务是否被取消。</p></li><li><p>boolean <code>isDone()</code> ： 判断任务是否已经被执行完成。</p></li><li><p><code>get()</code> ：等待任务执行完成并获取运算结果。会阻塞主线程</p></li><li><p><code>get(long timeout, TimeUnit unit)</code> ：多了一个超时时间。</p></li></ul><p><strong>CompletionStage接口</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230204223644600.png" alt="image-20230204223644600"></p><p><code>CompletionStage&lt;T&gt;</code> 接口中的方法比较多，<code>CompletableFuture</code> 的函数式能力就是这个接口赋予的。</p><p><strong>大量使用了 Java8 引入的函数式编程</strong></p><h4 id="创建-completablefuture" tabindex="-1"><a class="header-anchor" href="#创建-completablefuture" aria-hidden="true">#</a> 创建 CompletableFuture</h4><h5 id="一-通过-new-关键字。" tabindex="-1"><a class="header-anchor" href="#一-通过-new-关键字。" aria-hidden="true">#</a> <strong>一，通过 new 关键字。</strong></h5><p>通过 new 关键字创建 <code>CompletableFuture</code> 对象这种使用方式可以看作是将 <code>CompletableFuture</code> 当做 <code>Future</code> 来使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompletableFuture</span> completableFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="二-静态工厂方法" tabindex="-1"><a class="header-anchor" href="#二-静态工厂方法" aria-hidden="true">#</a> <strong>二，</strong> 静态工厂方法</h5><p><strong>基于 <code>CompletableFuture</code> 自带的静态工厂方法：<code>runAsync()</code> 、<code>supplyAsync()</code> 。</strong></p><h6 id="runasync-无返回结果" tabindex="-1"><a class="header-anchor" href="#runasync-无返回结果" aria-hidden="true">#</a> <code>runAsync()</code> 无返回结果</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span>
                                                   <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">asyncRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定线程池</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这里是通过CompletableFuture的静态方法runAsync启动的线程:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//循环等待直到线程池关闭完成</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="supplyasync-有返回结果" tabindex="-1"><a class="header-anchor" href="#supplyasync-有返回结果" aria-hidden="true">#</a> <code>supplyAsync()</code> 有返回结果</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span>
                                                       <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">//有返回值的</span>

    <span class="token doc-comment comment">/**
     * Gets a result.
     *
     * <span class="token keyword">@return</span> a result
     */</span>
    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定线程池</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span><span class="token comment">//有返回值</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> result <span class="token operator">=</span> supplyAsync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取线程执行后的返回值</span>

        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//循环等待指导线程池关闭完成</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理异步结算的结果" tabindex="-1"><a class="header-anchor" href="#处理异步结算的结果" aria-hidden="true">#</a> 处理异步结算的结果</h4><ul><li><code>thenApply()</code>进一步处理异步完成后的结果并返回处理结果</li><li><code>thenAccept()</code>进一步处理异步完成后的结果 无返回结果</li><li><code>thenRun()</code>进一步操作 无法获取异步完成后的结果 无返回结果</li><li><code>whenComplete()</code>进一步处理异步完成后的结果 无法处理结果数据能够感知异常（<code>exceptionally()</code>可以感知到异常并对异常进行处理【当出现异常设置默认返回值】）并返回处理结果</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span> \`<span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`进一步处理异步完成后的结果并返回处理结果
<span class="token operator">-</span> \`<span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`进一步处理异步完成后的结果 无返回结果
<span class="token operator">-</span> \`<span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`进一步操作 无法获取异步完成后的结果 无返回结果
    
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定线程池</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        supplyAsync<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//进一步处理异步完成后的结果并返回处理结果</span>
                <span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token string">&quot;--Eddie&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//进一步处理异步完成后的结果并返回处理结果</span>
                
                <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token comment">//进一步处理异步完成后的结果 无返回结果</span>
                
                <span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token comment">//进一步操作 无法获取异步完成后的结果 无返回结果</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我感知不到异步任务执行的任何结果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//循环等待直到线程池关闭完成</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span> \`<span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`进一步处理异步完成后的结果
无法处理结果数据能够感知异常（\`<span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`可以感知到异常并对异常进行处理【当出现异常设置默认返回值】）并返回处理结果
    
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定线程池</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//模拟出现异常</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        supplyAsync<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token comment">//当异步任务完成后</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上一步异步执行的结果是:&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;上异步出现的异常是&quot;</span> <span class="token operator">+</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//上一步异步执行的结果是:null	上异步出现的异常是java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token comment">//若异步任务完成时出现了异常</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现的异常是&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//出现的异常是java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span>
            <span class="token keyword">return</span> <span class="token string">&quot;如果出现异常的话 这里返回一个默认值&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果出现异常的话 这里返回一个默认值</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//循环等待指导线程池关闭完成</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Finished all threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步线程串行化" tabindex="-1"><a class="header-anchor" href="#异步线程串行化" aria-hidden="true">#</a> 异步线程串行化</h4><ul><li><code>thenRunAsync</code>启动一个新的异步线程 串行上一个异步线程 无感知上个线程的结果 无返回结果</li><li><code>thenAcceptAsync</code>启动一个新的异步线程 串行并处理上个异步线程完成后的结果 无返回结果</li><li><code>thenApplyAsync</code>启动一个新的异步线程 串行并处理上个异步线程完成后的结果并返回处理结果</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一：\`<span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`启动一个新的异步线程 串行并处理上个异步线程完成后的结果并返回处理结果
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> thenApplyAsync
        <span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span>
         <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
         
二：\`<span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`启动一个新的异步线程 串行并处理上个异步线程完成后的结果 无返回结果
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span>
                                                 <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
三：\`<span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`启动一个新的异步线程 串行上一个异步线程 无感知上个线程的结果 无返回结果
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span>
                                              <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h4><ul><li><code>handle()</code>处理任务执行过程中可能出现的抛出异常的情况</li><li><code>exceptionally()</code>可以感知到异常并对异常进行处理【当出现异常设置默认返回值】）并返回处理结果</li><li><code>completeExceptionally()</code>让结果就是异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一：\`<span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`处理任务执行过程中可能出现的抛出异常的情况
    可以感知到异常并对异常进行处理【当出现异常设置默认返回值】）并返回处理结果
    
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future
        <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Computation error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> ex<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// res 代表返回的结果</span>
    <span class="token comment">// ex 的类型为 Throwable ，代表抛出的异常</span>
    <span class="token keyword">return</span> res <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span><span class="token comment">//若未出现异常则 返回正常返回结果 反之指定异常后返回的默认值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

二：\`<span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`可以感知到异常并对异常进行处理【当出现异常设置默认返回值】）并返回处理结果
    
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//模拟出现异常</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        supplyAsync<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token comment">//当异步任务完成后</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上一步异步执行的结果是:&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;上异步出现的异常是&quot;</span> <span class="token operator">+</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//上一步异步执行的结果是:null	上异步出现的异常是java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token comment">//若异步任务完成时出现了异常</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现的异常是&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//出现的异常是java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span>
            <span class="token keyword">return</span> <span class="token string">&quot;如果出现异常的话 这里返回一个默认值&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果出现异常的话 这里返回一个默认值</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

三：\`<span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`让结果就是异常
    
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
completableFuture<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Calculation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ExecutionException</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组合两个completablefuture" tabindex="-1"><a class="header-anchor" href="#组合两个completablefuture" aria-hidden="true">#</a> 组合两个CompletableFuture</h4><ul><li><code>thenComposeAsync</code><strong>按顺序链接</strong>两个 <code>CompletableFuture</code> 对象;<strong>将前一个任务的返回结果作为下一个任务的参数</strong>，它们之间存在着先后顺序</li><li><code>thenCombineAsync</code>会<strong>在两个任务都执行完成后</strong>，把<strong>两个任务的结果处理后返回一个结果</strong>。两个任务是并行执行的，它们之间并<strong>没有先后依赖顺序</strong></li></ul><p><strong>两个都完成</strong></p><ul><li><code>runAfterBothAsync</code>两个异步线程都执行完后进行一些操作处理 <strong>无法感知</strong>两个线程的<strong>执行结果</strong> <strong>无返回值</strong></li><li><code>thenAcceptBothAsync</code>两个异步线程都执行完后进行一些操作处理 <strong>能够感知</strong>两个线程的<strong>执行结果</strong> <strong>无返回值</strong></li></ul><p><strong>任一完成</strong></p><ul><li><code>applyToEitherAsync</code>任意一个异步线程执行完成后进行一些操作处理 <strong>能够感知</strong>两个线程的<strong>执行结果</strong> <strong>返回一个结果</strong></li><li><code>acceptEitherAsync</code>任意一个异步线程执行完成后进行一些操作处理 <strong>能够感知</strong>两个线程的<strong>执行结果</strong> <strong>无返回值</strong></li><li><code>runAfterEitherAsync</code>任意一个异步线程执行完成后进行一些操作处理 <strong>无法感知</strong>两个线程的<strong>执行结果</strong> <strong>无返回值</strong></li></ul><h4 id="并行运行多个-completablefuture" tabindex="-1"><a class="header-anchor" href="#并行运行多个-completablefuture" aria-hidden="true">#</a> 并行运行多个 CompletableFuture</h4><p>可以通过 <code>CompletableFuture</code> 的 <code>allOf()</code>/<code>anyOf()</code>静态方法来并行运行多个 <code>CompletableFuture</code></p><ul><li><code>allOf()</code><strong>等到所有的 <code>CompletableFuture</code> 都运行完成之后再返回</strong></li><li>若线程A和B调用 <code>join()</code> 可以让程序等A和B线程 都运行完了之后再继续执行</li><li><code>anyOf()</code><strong>不会等待所有的 <code>CompletableFuture</code> 都运行完成之后再返回，只要有一个执行完成即可！</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span> 调用 \`<span class="token function">allOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`<span class="token operator">*</span><span class="token operator">*</span>等到所有的 \`<span class="token class-name">CompletableFuture</span>\` 都运行完成之后再返回<span class="token operator">*</span><span class="token operator">*</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> task1 <span class="token operator">=</span>
  <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//自定义业务操作</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> task6 <span class="token operator">=</span>
  <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//自定义业务操作</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> headerFuture<span class="token operator">=</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>task6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定多个异步线程</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    headerFuture<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;all done. &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">-</span> 调用 \`<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\` 可以让程序等\`future1\` 和 \`future2\` 都运行完了之后再继续执行
    
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>
completableFuture<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;all futures done...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">-</span> 调用 \`<span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`<span class="token operator">*</span><span class="token operator">*</span>不会等待所有的 \`<span class="token class-name">CompletableFuture</span>\` 都运行完成之后再返回，只要有一个执行完成即可！<span class="token operator">*</span><span class="token operator">*</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,206);function b(y,x){const e=l("ExternalLinkIcon");return o(),p("div",null,[u,n("blockquote",null,[r,d,k,m,n("p",null,[n("a",h,[s("《JSR-133：Java Memory Model and Thread Specification》"),c(e)])]),v]),g])}const w=t(i,[["render",b],["__file","java_concurrency_programming.html.vue"]]);export{w as default};
