const e=JSON.parse('{"key":"v-cc37aede","path":"/backend/java/jvm.html","title":"Java Virtual Machine","lang":"en-US","frontmatter":{"description":"JVM stands for Java Virtual Machine. It is a software that provides a runtime environment for executing Java programs.\\r Java is a high-level programming language that can run on...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/java/jvm.html"}],["meta",{"property":"og:site_name","content":"Eddie-Tech-Blog"}],["meta",{"property":"og:title","content":"Java Virtual Machine"}],["meta",{"property":"og:description","content":"JVM stands for Java Virtual Machine. It is a software that provides a runtime environment for executing Java programs.\\r Java is a high-level programming language that can run on..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Virtual Machine\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"JVM Structure","slug":"jvm-structure","link":"#jvm-structure","children":[{"level":3,"title":"JVM的架构模型 基于栈式架构","slug":"jvm的架构模型-基于栈式架构","link":"#jvm的架构模型-基于栈式架构","children":[]},{"level":3,"title":"JVM生命周期","slug":"jvm生命周期","link":"#jvm生命周期","children":[]}]},{"level":2,"title":"JVM Parameters Setting","slug":"jvm-parameters-setting","link":"#jvm-parameters-setting","children":[]},{"level":2,"title":"Look up JVM information","slug":"look-up-jvm-information","link":"#look-up-jvm-information","children":[{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"Debug/Run Configurations(IDEA Interface)","slug":"debug-run-configurations-idea-interface","link":"#debug-run-configurations-idea-interface","children":[]}]},{"level":2,"title":"Class Loading Subsystem","slug":"class-loading-subsystem","link":"#class-loading-subsystem","children":[{"level":3,"title":"类加载器和类的加载过程","slug":"类加载器和类的加载过程","link":"#类加载器和类的加载过程","children":[]},{"level":3,"title":"类的加载过程","slug":"类的加载过程","link":"#类的加载过程","children":[]},{"level":3,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[]},{"level":3,"title":"JVM中判断class对象相同的标准","slug":"jvm中判断class对象相同的标准","link":"#jvm中判断class对象相同的标准","children":[]},{"level":3,"title":"类加载器的引用","slug":"类加载器的引用","link":"#类加载器的引用","children":[]},{"level":3,"title":"Java程序对类的使用方式","slug":"java程序对类的使用方式","link":"#java程序对类的使用方式","children":[]}]},{"level":2,"title":"JVM Runtime Memory Area","slug":"jvm-runtime-memory-area","link":"#jvm-runtime-memory-area","children":[{"level":3,"title":"程序计数器（PC Regisster）","slug":"程序计数器-pc-regisster","link":"#程序计数器-pc-regisster","children":[]},{"level":3,"title":"虚拟机栈（JVM Stack）","slug":"虚拟机栈-jvm-stack","link":"#虚拟机栈-jvm-stack","children":[]},{"level":3,"title":"本地方法栈（Native Method Stack）","slug":"本地方法栈-native-method-stack","link":"#本地方法栈-native-method-stack","children":[]},{"level":3,"title":"堆（heep）","slug":"堆-heep","link":"#堆-heep","children":[]},{"level":3,"title":"方法区（Method Area）","slug":"方法区-method-area","link":"#方法区-method-area","children":[]}]},{"level":2,"title":"Java Object","slug":"java-object","link":"#java-object","children":[{"level":3,"title":"创建对象的方式","slug":"创建对象的方式","link":"#创建对象的方式","children":[]},{"level":3,"title":"创建对象的步骤","slug":"创建对象的步骤","link":"#创建对象的步骤","children":[]},{"level":3,"title":"内存布局","slug":"内存布局","link":"#内存布局","children":[]},{"level":3,"title":"访问定位","slug":"访问定位","link":"#访问定位","children":[]}]},{"level":2,"title":"JVM Garbage Collection","slug":"jvm-garbage-collection","link":"#jvm-garbage-collection","children":[{"level":3,"title":"Heap Area","slug":"heap-area","link":"#heap-area","children":[]},{"level":3,"title":"Memory allocation strategy","slug":"memory-allocation-strategy","link":"#memory-allocation-strategy","children":[]},{"level":3,"title":"Minor GC，Major GC，Full GC","slug":"minor-gc-major-gc-full-gc","link":"#minor-gc-major-gc-full-gc","children":[]},{"level":3,"title":"Trigger conditions for GC","slug":"trigger-conditions-for-gc","link":"#trigger-conditions-for-gc","children":[]},{"level":3,"title":"Garbage collection algorithm","slug":"garbage-collection-algorithm","link":"#garbage-collection-algorithm","children":[]},{"level":3,"title":"Garbage Collector","slug":"garbage-collector","link":"#garbage-collector","children":[]},{"level":3,"title":"Judgment of the object of death","slug":"judgment-of-the-object-of-death","link":"#judgment-of-the-object-of-death","children":[]},{"level":3,"title":"The reference type of the object","slug":"the-reference-type-of-the-object","link":"#the-reference-type-of-the-object","children":[]},{"level":3,"title":"A class that is judged to be useless","slug":"a-class-that-is-judged-to-be-useless","link":"#a-class-that-is-judged-to-be-useless","children":[]}]},{"level":2,"title":"JVM Out Of Memory","slug":"jvm-out-of-memory","link":"#jvm-out-of-memory","children":[]},{"level":2,"title":"JVM Performance Optimization","slug":"jvm-performance-optimization","link":"#jvm-performance-optimization","children":[]}],"git":{},"readingTime":{"minutes":71.35,"words":21406},"filePathRelative":"backend/java/jvm.md","autoDesc":true}');export{e as data};
