import{_ as p,W as o,X as c,Z as n,a1 as s,$ as e,Y as a,F as i}from"./framework-e28ace55.js";const l={},u=a(`<h1 id="spring-boot-deeply" tabindex="-1"><a class="header-anchor" href="#spring-boot-deeply" aria-hidden="true">#</a> Spring Boot Deeply</h1><h2 id="hello-spring-boot" tabindex="-1"><a class="header-anchor" href="#hello-spring-boot" aria-hidden="true">#</a> Hello Spring Boot</h2><h2 id="自动配置原理" tabindex="-1"><a class="header-anchor" href="#自动配置原理" aria-hidden="true">#</a> 自动配置原理</h2><p>SpringBoot<strong>默认会在底层配好所有的组件</strong>。但是如果用户自己配置了以<strong>用户的优先</strong></p><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration 按照条件装配规则**（@Conditional），最终会按需配置**</p><h3 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>依赖管理    
<span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>

他的父项目
 <span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>

几乎声明了所有开发中常用的依赖的版本号<span class="token punctuation">,</span>自动版本仲裁机制
    无需关注版本号，自动版本仲裁
    <span class="token number">1</span>、引入依赖默认都可以不写版本
    <span class="token number">2</span>、引入非版本仲裁的jar，要写版本号。
    
    
可以修改默认版本号
    <span class="token number">1</span>、查看spring<span class="token operator">-</span>boot<span class="token operator">-</span>dependencies里面规定当前依赖的版本 用的 key。
    <span class="token number">2</span>、在当前项目里面重写配置
    <span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>mysql<span class="token punctuation">.</span>version<span class="token punctuation">&gt;</span></span><span class="token number">5.1</span><span class="token number">.43</span><span class="token operator">&lt;</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">&gt;</span>
    
    
开发导入starter场景启动器<span class="token operator">--</span>起步依赖
    <span class="token number">1</span>、见到很多 spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span><span class="token operator">*</span> ： <span class="token operator">*</span>就某种场景
    <span class="token number">2</span>、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入
    <span class="token number">3</span>、<span class="token class-name">SpringBoot</span>所有支持的场景
    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>io<span class="token operator">/</span>spring<span class="token operator">-</span>boot<span class="token operator">/</span>docs<span class="token operator">/</span>current<span class="token operator">/</span>reference<span class="token operator">/</span>html<span class="token operator">/</span>using<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token punctuation">.</span>html#using<span class="token operator">-</span>boot<span class="token operator">-</span>starter
    <span class="token number">4</span>、见到的  <span class="token operator">*</span><span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter： 第三方为我们提供的简化开发的场景启动器。
    <span class="token number">5</span>、所有场景启动器最底层的依赖
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118094237279.png" alt="image-20221118094237279"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118095138455.png" alt="image-20221118095138455"></p><h3 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置" aria-hidden="true">#</a> 自动配置</h3><ul><li><p><strong>自动配好Tomcat</strong></p></li><li><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>自动配好SpringMVC</strong></p></li><li><ul><li><strong>引入SpringMVC全套组件</strong></li><li><strong>自动配好SpringMVC常用组件（功能）</strong></li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p></li><li><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p><strong>默认的包结构</strong></p></li><li><ul><li><strong>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</strong></li><li>无需以前的包扫描配置</li><li><strong>想要改变扫描路径，@SpringBootApplication(scanBasePackages=&quot;com.eddie&quot;)</strong></li></ul></li><li><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118100718091.png" alt="image-20221118100718091"></p></li><li><ul><li><ul><li><strong>或者@ComponentScan 指定扫描路径</strong></li></ul></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
等同于
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.eddie.boot&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118100837667.png" alt="image-20221118100837667"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118095415107.png" alt="image-20221118095415107"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118095627629.png" alt="image-20221118095627629"></p><ul><li><p><strong>各种配置拥有默认值</strong></p></li><li><ul><li><strong>默认配置</strong>最终都是<strong>映射到某个类上</strong>，如：MultipartProperties</li></ul></li><li><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118101147970.png" alt="image-20221118101147970"></p></li><li><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118101132664.png" alt="image-20221118101132664"></p></li><li><ul><li><strong>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</strong></li></ul></li><li><p><strong>按需加载所有自动配置项</strong></p></li><li><ul><li>非常多的starter</li><li><strong>引入了哪些场景这个场景的自动配置才会开启</strong></li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>autoconfigure<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.7</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li></ul><h3 id="查看spring-boot为我们自动配置的组件" tabindex="-1"><a class="header-anchor" href="#查看spring-boot为我们自动配置的组件" aria-hidden="true">#</a> 查看Spring Boot为我们自动配置的组件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringHelloApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//返回的IOC容器</span>
        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringHelloApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取IOC容器中所有组件的name</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span>
                beanDefinitionNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118100245199.png" alt="image-20221118100245199"></p><h3 id="spring自动配置原理" tabindex="-1"><a class="header-anchor" href="#spring自动配置原理" aria-hidden="true">#</a> Spring自动配置原理</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118193315466.png" alt="image-20221118193315466"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118192600694.png" alt="image-20221118192600694"></p><h3 id="按需加载-conditional条件装配" tabindex="-1"><a class="header-anchor" href="#按需加载-conditional条件装配" aria-hidden="true">#</a> 按需加载（@Conditional条件装配）</h3><h4 id="import-autoconfigurationimportselector-class" tabindex="-1"><a class="header-anchor" href="#import-autoconfigurationimportselector-class" aria-hidden="true">#</a> @Import(AutoConfigurationImportSelector.class)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>、利用<span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>给容器中批量导入一些组件
<span class="token number">2</span>、调用<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span>获取到所有需要导入到容器中的配置类
<span class="token number">3</span>、利用工厂加载 <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span>；得到所有的组件
<span class="token number">4</span>、从<span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>factories位置来加载一个文件。
	默认扫描我们当前系统里面所有<span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>factories位置的文件
    spring<span class="token operator">-</span>boot<span class="token operator">-</span>autoconfigure<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token punctuation">.</span>jar包里面也有<span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>factories
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118195405828.png" alt="image-20221118195405828"></p><h4 id="按需加载" tabindex="-1"><a class="header-anchor" href="#按需加载" aria-hidden="true">#</a> 按需加载</h4><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration 按照条件装配规则（@Conditional），最终会按需配置。</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118195201168.png" alt="image-20221118195201168"></p><h3 id="ioc容器功能" tabindex="-1"><a class="header-anchor" href="#ioc容器功能" aria-hidden="true">#</a> IOC容器功能</h3><h4 id="组件添加" tabindex="-1"><a class="header-anchor" href="#组件添加" aria-hidden="true">#</a> 组件添加</h4><h5 id="configuration-bean" tabindex="-1"><a class="header-anchor" href="#configuration-bean" aria-hidden="true">#</a> @Configuration|@Bean</h5><p><strong>.<code>@Configuration</code>配置类是有主次之分的，主配置类是驱动整个程序的入口，可以是一个，也可以是多个（若存在多个，支持使用@Order排序）</strong></p><ul><li><p>基本使用</p></li><li><p><strong>Full模式与Lite模式</strong></p></li><li><ul><li>示例</li><li>最佳实战</li></ul></li><li><ul><li><ul><li>配置 <strong>类组件之间无依赖关系用Lite模式加速容器启动过程</strong>，减少判断并能<strong>提高Spring启动速度</strong></li><li><strong>配置类组件之间有依赖关系</strong>，方法会被<strong>调用得到之前单实例组件</strong>，<strong>用Full模式</strong></li></ul></li><li><p>@Configuration（proxyBeanMethods = true）配置类为代理对象 会到IOC容器进行寻找Bean 保证单例Bean</p></li><li><p>Full——&gt;proxyBeanMethods = true单例模式 会到IOC容器中寻找Bean</p></li><li><p>Lite——&gt;proxyBeanMethods = false多例模式</p></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token comment">//指明是配置类 配置类也是IOC容器中的组件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token comment">//给容器中添加组件 方法名为组件的id(可以通过name属性指定组件的id) 返回类型就是组件的类型 返回的值就是组件</span>
                            <span class="token comment">//spring默认的单列Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">myBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//组件注册方法</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;Information Technology&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Eddie Study Java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Persevere&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringHelloSsm1Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringHelloSsm1Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Book</span> javaBean1 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myBook&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Book</span> javaBean2 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myBook&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Book</span> javaBean3 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myBook&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>javaBean3 <span class="token operator">==</span> javaBean2 <span class="token operator">&amp;&amp;</span> javaBean2 <span class="token operator">==</span> javaBean1<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;myBook is  simple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

console
    myBook is  simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118112300368.png" alt="image-20221118112300368"></p><h5 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> @Component</h5><p>标识为任意层组件的注解</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118114221633.png" alt="image-20221118114221633"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@Component</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> @Controller</h5><p>标识为Controller层的注解</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118114325489.png" alt="image-20221118114325489"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@Controller</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>
        annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> @Service</h5><p>标识为Service层的注解</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118114312465.png" alt="image-20221118114312465"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>
        annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="repository" tabindex="-1"><a class="header-anchor" href="#repository" aria-hidden="true">#</a> @Repository</h5><p>标识为DAO层的注解</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118114350935.png" alt="image-20221118114350935"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@Repository</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>
        annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan" aria-hidden="true">#</a> @ComponentScan</h5><p>开启组件扫描并指定组件扫描的包范围的注解</p><p>@ComponentScan(basePackages = &quot;com.example&quot;)</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118114040367.png" alt="image-20221118114040367"></p><h5 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> @Import</h5><p>@Import（{JdbcConfig.class,SpringMvcConfig.class}）默认在IOC容器中的BeanName为全类名</p><p>给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</p><p><strong>用来导入其他配置类</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118131103698.png" alt="image-20221118131103698"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@Import</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional" aria-hidden="true">#</a> @Conditional</h5><p><strong>条件装配</strong>：满足Conditional指定的条件，则进行组件注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>测试条件装配<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token annotation punctuation">@Configuration</span><span class="token comment">//告诉SpringBoot这是一个配置类 == 配置文件</span>
<span class="token comment">//@ConditionalOnBean(name = &quot;tom&quot;)当IOC容器中有name为&quot;tom&quot;的bean时 配置类中的@Bean的配置方法才会生效</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token comment">//当IOC容器中没有name为&quot;tom&quot;的bean时 配置类中的@Bean的配置方法才会生效</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>

	
    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span>
    <span class="token comment">//@ConditionalOnBean(name = &quot;tom&quot;)当IOC容器中有name为&quot;tom&quot;的bean时 此@Bean的配置方法才会生效</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//user组件依赖了Pet组件</span>
        zhangsan<span class="token punctuation">.</span><span class="token function">setPet</span><span class="token punctuation">(</span><span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> zhangsan<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;tom22&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">&quot;tomcat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、返回我们IOC容器</span>
        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2、查看容器里面的组件</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">boolean</span> tom <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器中Tom组件：&quot;</span><span class="token operator">+</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> user01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;user01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器中user01组件：&quot;</span><span class="token operator">+</span>user01<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> tom22 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器中tom22组件：&quot;</span><span class="token operator">+</span>tom22<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118130304008.png" alt="image-20221118130304008"></p><h4 id="配置文件引入" tabindex="-1"><a class="header-anchor" href="#配置文件引入" aria-hidden="true">#</a> 配置文件引入</h4><h5 id="importresource-classpath-配置文件名" tabindex="-1"><a class="header-anchor" href="#importresource-classpath-配置文件名" aria-hidden="true">#</a> @ImportResource(&quot;classpath:配置文件名&quot;)</h5><p>引入xml等配置文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:beans.xml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>测试<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
        <span class="token keyword">boolean</span> haha <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> hehe <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">&quot;hehe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;haha：&quot;</span><span class="token operator">+</span>haha<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hehe：&quot;</span><span class="token operator">+</span>hehe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
======================beans.xml=========================
<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>haha<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.boot.bean.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zhangsan<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hehe<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.boot.bean.Pet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置绑定-读取配置内容封装成实体类对象" tabindex="-1"><a class="header-anchor" href="#配置绑定-读取配置内容封装成实体类对象" aria-hidden="true">#</a> 配置绑定（读取配置内容封装成实体类对象）</h4><h5 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>确保实体类作为IOC容器中的组件</strong> @Component或者@EnableConfigurationProperties（实体类.class）开启实体类的属性绑定功能</p><p><strong>将配置文件中的内容读取</strong>并且<strong>封装成Java实体对象</strong>以<strong>供后续使用</strong></p><h5 id="方式一-component-configurationproperties" tabindex="-1"><a class="header-anchor" href="#方式一-component-configurationproperties" aria-hidden="true">#</a> 方式一@Component+@ConfigurationProperties</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token comment">//指定前缀</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token comment">//需要提供get和set方法</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">user</span><span class="token punctuation">:</span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> EddieZhang
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span>
  <span class="token key atrule">gender</span><span class="token punctuation">:</span> 男
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118185924766.png" alt="image-20221118185924766"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118185905550.png" alt="image-20221118185905550"></p><h5 id="方式二-enableconfigurationproperties-configurationproperties" tabindex="-1"><a class="header-anchor" href="#方式二-enableconfigurationproperties-configurationproperties" aria-hidden="true">#</a> 方式二@EnableConfigurationProperties+@ConfigurationProperties</h5><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118190541939.png" alt="image-20221118190541939"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118190553453.png" alt="image-20221118190553453"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118190601920.png" alt="image-20221118190601920"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230131182755492.png" alt="image-20230131182755492"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118185905550.png" alt="image-20221118185905550"></p><h3 id="使用commandlinerunner" tabindex="-1"><a class="header-anchor" href="#使用commandlinerunner" aria-hidden="true">#</a> 使用CommandLineRunner</h3><p><strong>容器加载后</strong> <strong>项目启动前</strong>调用CommandLineRunner接口的run方法</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120235927335.png" alt="image-20221120235927335"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121000131841.png" alt="image-20221121000131841"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121000949904.png" alt="image-20221121000949904"></p><h3 id="修改默认配置" tabindex="-1"><a class="header-anchor" href="#修改默认配置" aria-hidden="true">#</a> 修改默认配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token annotation punctuation">@Bean</span>
		<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//容器中有这个类型组件</span>
		<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token constant">MULTIPART_RESOLVER_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token comment">//容器中没这个名字 multipartResolver 的组件</span>
		<span class="token keyword">public</span> <span class="token class-name">MultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>
            <span class="token comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>
			<span class="token comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span>
			<span class="token keyword">return</span> resolver<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
        给容器中加入了文件上传解析器；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以<strong>用户的优先</strong></p><p>自己@Bean注册一个组件到容器中 SpringBoot会以用户的为准</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token keyword">public</span> <span class="token class-name">CharacterEncodingFilter</span> <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>总结：</p><ul><li><p>SpringBoot<strong>先加载所有的自动配置类</strong> xxxxxAutoConfiguration</p></li><li><p>每个自动配置类<strong>按照条件进行生效</strong>，<strong>默认都会绑定配置文件</strong>指定的值。xxxxProperties里面拿。<strong>xxxProperties和配置文件进行了绑定</strong></p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己**@Bean替换底层的组件**</li><li>用户去看这个组件是获取的<strong>配置文件</strong>什么值就去<strong>修改</strong>。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration ---&gt; 组件 ---&gt;</strong> <strong>xxxxProperties里面拿值 ----&gt; application.properties</strong></p><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><ul><li><p>引入场景依赖</p></li><li><ul><li>https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</li></ul></li><li><p>查看自动配置了哪些（选做）</p></li><li><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。Negative（不生效）\\Positive（生效）</li></ul></li><li><p>是否需要修改</p></li><li><ul><li>参照文档修改配置项</li></ul></li><li><ul><li><ul><li>https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li></ul></li><li><ul><li>自定义加入或者替换组件</li></ul></li><li><ul><li><ul><li>@Bean、@Component。。。</li></ul></li></ul></li><li><ul><li>自定义器 <strong>XXXXXCustomizer</strong>；</li><li>......</li></ul></li></ul><h3 id="使用容器" tabindex="-1"><a class="header-anchor" href="#使用容器" aria-hidden="true">#</a> 使用容器</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120234910779.png" alt="image-20221120234910779"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120235032509.png" alt="image-20221120235032509"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120234936825.png" alt="image-20221120234936825"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120234946229.png" alt="image-20221120234946229"></p><h2 id="lombok" tabindex="-1"><a class="header-anchor" href="#lombok" aria-hidden="true">#</a> Lombok</h2><h3 id="简化domain开发" tabindex="-1"><a class="header-anchor" href="#简化domain开发" aria-hidden="true">#</a> 简化domain开发</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118223930965.png" alt="image-20221118223930965"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118223916959.png" alt="image-20221118223916959"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221111095900057.png" alt="image-20221111095900057"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118224021282.png" alt="image-20221118224021282"></p><h3 id="slf4j日志" tabindex="-1"><a class="header-anchor" href="#slf4j日志" aria-hidden="true">#</a> @Slf4j日志</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118224249140.png" alt="image-20221118224249140"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118224508000.png" alt="image-20221118224508000"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118224457296.png" alt="image-20221118224457296"></p><h2 id="dev-tools" tabindex="-1"><a class="header-anchor" href="#dev-tools" aria-hidden="true">#</a> Dev-Tools</h2><p>热更新</p><p>ctrl+F9</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118225154707.png" alt="image-20221118225154707"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118224724053.png" alt="image-20221118224724053"></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>application.properties &gt; application.yml &gt; application.yaml</p><h3 id="yaml格式文件" tabindex="-1"><a class="header-anchor" href="#yaml格式文件" aria-hidden="true">#</a> .yaml格式文件</h3><p>核心规则：<strong>数据前</strong>面要<strong>加空格与冒号隔开</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118232049221.png" alt="image-20221118232049221"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118232104622.png" alt="image-20221118232104622"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118230428882.png" alt="image-20221118230428882"></p><p>优点： 容易阅读</p><p>yaml 类型的配置文件比 xml 类型的配置文件更容易阅读，结构更加清晰 容易与脚本语言交互 以数据为核心，重数据轻格式</p><p>yaml 更注重数据，而 xml 更注重格式</p><p>YAML 文件扩展名：</p><p>.yml (主流)</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118230326497.png" alt="image-20221118230326497"></p><p>.yaml</p><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h4><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>&#39;#&#39;表示注释</li><li>字符串无需加引号，如果要加，&#39;&#39;与&quot;&quot;表示字符串内容 会被 转义/不转义</li></ul><h4 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h4><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>banner.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>k1<span class="token punctuation">:</span>v1<span class="token punctuation">,</span>k2<span class="token punctuation">:</span>v2<span class="token punctuation">,</span>k3<span class="token punctuation">:</span>v3<span class="token punctuation">}</span>
<span class="token comment">#或</span>
<span class="token key atrule">k</span><span class="token punctuation">:</span> 
  <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1
  <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2
  <span class="token key atrule">k3</span><span class="token punctuation">:</span> v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">行内写法：  k</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">]</span>
<span class="token comment">#或者</span>
<span class="token key atrule">k</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> v1
 <span class="token punctuation">-</span> v2
 <span class="token punctuation">-</span> v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置提示" tabindex="-1"><a class="header-anchor" href="#配置提示" aria-hidden="true">#</a> 配置提示</h4><p>自定义的类和配置文件绑定一般没有提示</p><p>可以引入spring-boot-configuration-processor依赖</p><p>建议打包的时候把配置处理器（对于我们配置有友好提示的作用）exclude掉 没必要将与项目运行无关的进行打包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>configuration<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>optional<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
      <span class="token comment">//建议打包的时候把配置处理器（对于我们配置有友好提示的作用）exclude掉 没必要将与项目运行无关的进行打包      </span>
      <span class="token generics"><span class="token punctuation">&lt;</span>build<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">&gt;</span></span>
                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>
                    <span class="token generics"><span class="token punctuation">&lt;</span>excludes<span class="token punctuation">&gt;</span></span>
                        <span class="token generics"><span class="token punctuation">&lt;</span>exclude<span class="token punctuation">&gt;</span></span>
                            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
                            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>configuration<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>exclude<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>excludes<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118231624133.png" alt="image-20221118231624133"></p><h3 id="properties文件" tabindex="-1"><a class="header-anchor" href="#properties文件" aria-hidden="true">#</a> properties文件</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118231400615.png" alt="image-20221118231400615"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118231333469.png" alt="image-20221118231333469"></p><h3 id="多环境配置" tabindex="-1"><a class="header-anchor" href="#多环境配置" aria-hidden="true">#</a> 多环境配置</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120234428578.png" alt="image-20221120234428578"></p><h2 id="web开发" tabindex="-1"><a class="header-anchor" href="#web开发" aria-hidden="true">#</a> Web开发</h2><h3 id="静态资源访问" tabindex="-1"><a class="header-anchor" href="#静态资源访问" aria-hidden="true">#</a> 静态资源访问</h3><p>原理： 静态映射/**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221118235847527.png" alt="image-20221118235847527"></p><h4 id="静态资源目录" tabindex="-1"><a class="header-anchor" href="#静态资源目录" aria-hidden="true">#</a> 静态资源目录</h4><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问 ： 当前项目根路径/ + 静态资源名</p><h4 id="改变默认的静态资源路径以及访问前缀" tabindex="-1"><a class="header-anchor" href="#改变默认的静态资源路径以及访问前缀" aria-hidden="true">#</a> 改变默认的静态资源路径以及访问前缀</h4><p>默认目录： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>默认无前缀</p><p>前缀的指定会由于SpringBoot的原因 影响<strong>欢迎页面</strong>以及<strong>Favicon图标</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span>
    <span class="token comment"># 配置静态资源访问前缀</span>

  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>
    <span class="token comment"># 静态资源路径目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="webjar-了解" tabindex="-1"><a class="header-anchor" href="#webjar-了解" aria-hidden="true">#</a> webjar（了解）</h4>`,174),r={href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>https://www.webjars.org/</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),k={href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"jquery/3.5.1/jquery.js",-1),g=a(`<h3 id="欢迎页面" tabindex="-1"><a class="header-anchor" href="#欢迎页面" aria-hidden="true">#</a> 欢迎页面</h3><ul><li><p>静态资源路径下 index.html</p></li><li><ul><li>可以配置静态资源路径</li><li>但是<strong>不可以配置静态资源的访问前缀</strong>。否则<strong>导致 index.html不能被默认访问</strong></li></ul></li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119000456276.png" alt="image-20221119000456276"></p><h3 id="自定义-favicon" tabindex="-1"><a class="header-anchor" href="#自定义-favicon" aria-hidden="true">#</a> 自定义 <code>Favicon</code></h3><p>图标</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119110404974.png" alt="image-20221119110404974"></p><p>favicon.ico 放在静态资源目录下即可 同时Browser禁用缓存</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119001256834.png" alt="image-20221119001256834"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119001319853.png" alt="image-20221119001319853"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119001327388.png" alt="image-20221119001327388"></p><h3 id="静态资源配置原理" tabindex="-1"><a class="header-anchor" href="#静态资源配置原理" aria-hidden="true">#</a> 静态资源配置原理</h3><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119103203003.png" alt="image-20221119103203003"></p><p>配置文件的相关属性进行了绑定</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WebProperties------&quot;spring.web&quot;
ResourceProperties------&quot;spring.resources&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119103948983.png" alt="image-20221119103948983"></p><p><strong>配置类只有一个有参构造</strong></p><p>//有参构造器所有参数的值都会从容器中确定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span>
<span class="token comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span>
<span class="token comment">//ListableBeanFactory beanFactory Spring的beanFactory</span>
<span class="token comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span>
<span class="token comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span>
<span class="token comment">//DispatcherServletPath  </span>
<span class="token comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span>
<span class="token keyword">public</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span><span class="token punctuation">(</span><span class="token class-name">WebProperties</span> webProperties<span class="token punctuation">,</span> <span class="token class-name">WebMvcProperties</span> mvcProperties<span class="token punctuation">,</span> <span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConvertersProvider<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">&gt;</span></span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DispatcherServletPath</span><span class="token punctuation">&gt;</span></span> dispatcherServletPath<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> servletRegistrations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> webProperties<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties <span class="token operator">=</span> mvcProperties<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>messageConvertersProvider <span class="token operator">=</span> messageConvertersProvider<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceHandlerRegistrationCustomizer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">)</span>resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath <span class="token operator">=</span> dispatcherServletPath<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>servletRegistrations <span class="token operator">=</span> servletRegistrations<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">checkConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="资源处理器的默认规则" tabindex="-1"><a class="header-anchor" href="#资源处理器的默认规则" aria-hidden="true">#</a> 资源处理器的默认规则</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119110431494.png" alt="image-20221119110431494"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ServletContextResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Resources</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/public/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> addMappings<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> customized<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Chain</span> chain<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Cache</span> cache<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations <span class="token operator">=</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>addMappings <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119105017981.png" alt="image-20221119105017981"></p><h4 id="欢迎页的处理规则" tabindex="-1"><a class="header-anchor" href="#欢迎页的处理规则" aria-hidden="true">#</a> 欢迎页的处理规则</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HandlerMapping</span>：处理器映射。保存了每一个<span class="token class-name">Handler</span>能处理哪些请求。	

    <span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span>
			<span class="token class-name">FormattingConversionService</span> mvcConversionService<span class="token punctuation">,</span> <span class="token class-name">ResourceUrlProvider</span> mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">WelcomePageHandlerMapping</span> welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>
				<span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setCorsConfigurations</span><span class="token punctuation">(</span><span class="token function">getCorsConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">TemplateAvailabilityProviders</span> templateAvailabilityProviders<span class="token punctuation">,</span>
		<span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> welcomePage<span class="token punctuation">,</span> <span class="token class-name">String</span> staticPathPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>welcomePage<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;/**&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//要用欢迎页功能，必须是/**</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page: &quot;</span> <span class="token operator">+</span> welcomePage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;forward:index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">welcomeTemplateExists</span><span class="token punctuation">(</span>templateAvailabilityProviders<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用Controller  /index</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page template: index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119110827085.png" alt="image-20221119110827085"></p><h3 id="请求参数处理" tabindex="-1"><a class="header-anchor" href="#请求参数处理" aria-hidden="true">#</a> 请求参数处理</h3><h4 id="请求映射" tabindex="-1"><a class="header-anchor" href="#请求映射" aria-hidden="true">#</a> 请求映射</h4><h5 id="rest使用与原理" tabindex="-1"><a class="header-anchor" href="#rest使用与原理" aria-hidden="true">#</a> rest使用与原理</h5><h6 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h6><p><strong>针对From表单提交</strong>（由于From表单只有get和post两个请求方式 并且默认为get请求）</p><p>因此需要<strong>HiddenMethodFilter</strong>来进行包装 进而有POST GET DELETE PUT四种请求</p><ul><li><p>@xxxMapping；</p></li><li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p></li><li><ul><li><em>以前：**/getUser</em> <em>获取用户</em> <em>/deleteUser</em> <em>删除用户</em> <em>/editUser</em> <em>修改用户</em> <em>/saveUser</em> <em>保存用户</em></li><li><em>现在： /user</em> *GET-*<em>获取用户</em> *DELETE-*<em>删除用户</em> *PUT-*<em>修改用户</em> *POST-*<em>保存用户</em></li><li><strong>核心Filter；HiddenHttpMethodFilter</strong></li></ul></li><li><ul><li><ul><li>用法： <strong>表单method=post，隐藏域 _method=put</strong></li><li><strong>SpringBoot中手动开启</strong></li><li>如何把_method 这个名字换成我们自己喜欢的。<strong>自定义一个HiddenMethodFilter取代系统提供的 并setMethodParam</strong></li></ul></li><li><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119121935857.png" alt="image-20221119121935857"></p></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/target/hiddenMethodTest}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_method<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>put<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119121612285.png" alt="image-20221119121612285"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119121548291.png" alt="image-20221119121548291"></p><h6 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h6><p>Rest原理（表单提交要使用REST的时候）</p><ul><li><p>表单提交会带上**_method=PUT**</p></li><li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p></li><li><ul><li>请求是否正常，并且是POST</li></ul></li><li><ul><li><ul><li>获取到**_method**的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requestWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用</strong> <strong>requesWrapper的。</strong></li></ul></li></ul></li></ul><p><strong>Rest使用客户端工具，</strong></p><ul><li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li></ul><h3 id="请求映射原理" tabindex="-1"><a class="header-anchor" href="#请求映射原理" aria-hidden="true">#</a> 请求映射原理</h3><p>SpringMVC中所有的请求都会过<strong>DispatcherServlet</strong>（前端控制器）</p><p>所有的请求映射都在<strong>HandlerMapping</strong>中。</p><ul><li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</p></li><li><p>SpringBoot自动配置了默认 的 <strong>RequestMappingHandlerMapping--对应的@RequestMapping注解</strong></p></li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p></li><li><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p></li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119152055026.png" alt="image-20221119152055026"></p><p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119152009891.png" alt="image-20221119152009891"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119153118917.png" alt="image-20221119153118917"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119153126839.png" alt="image-20221119153126839"></p><p><strong>RequestMappingHandlerMapping</strong>：保存了所有**@RequestMapping** 和<strong>handler</strong>的映射规则。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181662070-9e526de8-fd78-4a02-9410-728f059d6aef.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="img"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119153541356.png" alt="image-20221119153541356"></p><h3 id="参数处理原理" tabindex="-1"><a class="header-anchor" href="#参数处理原理" aria-hidden="true">#</a> 参数处理原理</h3><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p><p><strong>Servlet API：</strong></p><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p><p><strong>复杂参数：</strong></p><p><strong>Map</strong>、**Model（map、model里面的数据会被放在request的请求域 request.setAttribute）、**Errors/BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><p><strong>参数处理原理</strong></p><ul><li>HandlerMapping中找到能处理请求的Handler（Controller.method()）</li><li>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></li><li>适配器执行目标方法并确定方法参数的每一个值</li></ul><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119190120881.png" alt="image-20221119190120881"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119190253118.png" alt="image-20221119190253118"></p><p><strong>HandlerAdapter</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119190139817.png" alt="image-20221119190139817"></p><p>0 - 支持方法上标注@RequestMapping</p><p>1 - 支持函数式编程的</p><p><strong>执行目标方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Actually invoke the handler.</span>
<span class="token comment">//DispatcherServlet -- doDispatch</span>
mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行目标方法</span>


<span class="token comment">//ServletInvocableHandlerMethod</span>
<span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取方法的参数值</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119190416461.png" alt="image-20221119190416461"></p><p><strong>参数解析器-HandlerMethodArgumentResolver</strong></p><p>确定将要执行的目标方法的每一个参数的值是什么</p><p>SpringMVC目标方法能写多少种参数类型。取决于参数解析器</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119193354170.png" alt="image-20221119193354170"></p><ul><li>当前解析器是否支持解析这种参数</li><li>支持就调用 resolveArgument</li></ul><p><strong>返回值处理器</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221119193413441.png" alt="image-20221119193413441"></p><h1 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot" aria-hidden="true">#</a> Spring Boot</h1>`,80),v={href:"https://spring.io/projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},h=a(`<p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221120230430368.png" alt="image-20221120230430368"></p><h2 id="web组件" tabindex="-1"><a class="header-anchor" href="#web组件" aria-hidden="true">#</a> Web组件</h2><h3 id="拦截器interceptor" tabindex="-1"><a class="header-anchor" href="#拦截器interceptor" aria-hidden="true">#</a> 拦截器Interceptor</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121122042619.png" alt="image-20221121122042619"></p><h3 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet" aria-hidden="true">#</a> Servlet</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121123511247.png" alt="image-20221121123511247"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121123835671.png" alt="image-20221121123835671"></p><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121130741548.png" alt="image-20221121130741548"></p><h4 id="characterencodingfilter解决响应中文乱码的filter" tabindex="-1"><a class="header-anchor" href="#characterencodingfilter解决响应中文乱码的filter" aria-hidden="true">#</a> CharacterEncodingFilter解决响应中文乱码的Filter</h4><p>yml配置</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121131916091.png" alt="image-20221121131916091"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121132024668.png" alt="image-20221121132024668"></p><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> &amp;Mybatis</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161514152.png" alt="image-20221121161514152"></p><h3 id="mapper-mapperscan" tabindex="-1"><a class="header-anchor" href="#mapper-mapperscan" aria-hidden="true">#</a> @Mapper&amp;@MapperScan</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161609495.png" alt="image-20221121161609495"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161621789.png" alt="image-20221121161621789"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161640952.png" alt="image-20221121161640952"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161628019.png" alt="image-20221121161628019"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121161649372.png" alt="image-20221121161649372"></p><h3 id="spring事务" tabindex="-1"><a class="header-anchor" href="#spring事务" aria-hidden="true">#</a> &amp;Spring事务</h3><h4 id="spring中的事务管理" tabindex="-1"><a class="header-anchor" href="#spring中的事务管理" aria-hidden="true">#</a> Spring中的事务管理：</h4><p>1）：管理事务的对象：事务管理器（接口，接口有很多实现类）</p><p>使用JDBC或Mybatis访问数据库，使用<strong>事务管理器DataSourceTransactionManager</strong></p><p>2）：<strong>声明式事务</strong>：使用注解说明事务控制的内容--<strong>底层使用 AOP 原理</strong></p><p><strong>控制事务：隔离级别；传播行为；超时时间</strong></p><p>3）：事务的处理方式：</p><p>1.<strong>Spring中的@Transactional注解</strong></p><p>2.aspectj框架可以再xml文件中声明事务的内容</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121180257137.png" alt="image-20221121180257137"></p><h4 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121175430623.png" alt="image-20221121175430623"></p><h4 id="传播行为" tabindex="-1"><a class="header-anchor" href="#传播行为" aria-hidden="true">#</a> 传播行为</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121175258014.png" alt="image-20221121175258014"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121175900789.png" alt="image-20221121175900789"></p><h4 id="超时时间" tabindex="-1"><a class="header-anchor" href="#超时时间" aria-hidden="true">#</a> 超时时间</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121175509079.png" alt="image-20221121175509079"></p><h2 id="rest风格" tabindex="-1"><a class="header-anchor" href="#rest风格" aria-hidden="true">#</a> REST风格</h2><p><strong>REST风格：使用url表示资源；使用http动作操作资源</strong></p><p><strong>RESTful风格</strong>中，当请求路径中将某些数据通过路径的方式传输到服 务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在 <strong>通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</strong></p><p><strong>url地址+请求方式确保是唯一</strong>的 否则系统无法辨别 <strong>导致启动出错</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221027163300977.png" alt="image-20221027163300977"></p><p><strong>http请求中仅支持get以及post请求</strong></p><h3 id="使用put-delete请求" tabindex="-1"><a class="header-anchor" href="#使用put-delete请求" aria-hidden="true">#</a> 使用PUT&amp;DELETE请求</h3><p><strong>org.springframework.web.filter.HiddenHttpMethodFilter</strong></p><p>若需要实现put以及delete请求需要使用<strong>HiddenMethodFilter</strong>通过<strong>对post请求进行包装（装饰者模式）<strong>成</strong>put或delete请求</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121184206446.png" alt="image-20221121184206446"></p><p>@GetMapping</p><p>@PostMapping</p><p>@PutMapping</p><p>@DeleteMapping</p><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> &amp;Redis</h2><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121224051661.png" alt="image-20221121224051661"></p><h3 id="template对象" tabindex="-1"><a class="header-anchor" href="#template对象" aria-hidden="true">#</a> Template对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringRedisTemplate</span>
<span class="token comment">//对于key和value都是使用的是String字符串的序列化；可读性好；</span>

<span class="token class-name">RedisTemplate</span>
<span class="token comment">//对于key和value都是经过序列化的内容;无法直接识别（默认使用jdk的序列化）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121223612417.png" alt="image-20221121223612417"></p><h3 id="redis序列化" tabindex="-1"><a class="header-anchor" href="#redis序列化" aria-hidden="true">#</a> Redis序列化</h3><p><strong>序列化：把对象转化为可传输的字节序列过程称为序列化</strong></p><p><strong>反序列化：把字节序列还原为对象的过程称为反序列化</strong></p><p><strong>为什么需要序列化：为了对象可以跨平台传输；进行网络传输。</strong></p><p>跨平台储存的方式网络传输IO；IO支持的格式就是字节数组。（序列化数据）</p><p>Java的序列化：将Java对象转换为Byte[ ]数组（二进制数据）</p><p>json序列化与反序列化：JSON格式和对象格式的相互转换</p><h3 id="设置redistemplate序列化" tabindex="-1"><a class="header-anchor" href="#设置redistemplate序列化" aria-hidden="true">#</a> 设置RedisTemplate序列化</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121225243510.png" alt="image-20221121225243510"></p><h3 id="jackson-json序列化" tabindex="-1"><a class="header-anchor" href="#jackson-json序列化" aria-hidden="true">#</a> JackSon（JSON序列化）</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221121233237625.png" alt="image-20221121233237625"></p><h2 id="spring-cache" tabindex="-1"><a class="header-anchor" href="#spring-cache" aria-hidden="true">#</a> Spring Cache</h2>`,69),b={href:"https://www.baeldung.com/spring-cache-tutorial",target:"_blank",rel:"noopener noreferrer"},y=a(`<p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107101628272.png" alt="image-20230107101628272"></p><p><strong>基于注解（annotation）的缓存（cache）技术</strong>，它本质上不是一个具体的缓存实现方案（比如EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中加入少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107102028639.png" alt="image-20230107102028639"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107101942722.png" alt="image-20230107101942722"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107102236925.png" alt="image-20230107102236925"></p><h3 id="spring-框架自带的cachemanager-内存层面的缓存" tabindex="-1"><a class="header-anchor" href="#spring-框架自带的cachemanager-内存层面的缓存" aria-hidden="true">#</a> Spring 框架自带的CacheManager(内存层面的缓存)</h3><p><strong>底层基于ConcurrentHashMap实现的 程序停止则缓消失</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCaching</span><span class="token comment">//启动Cache缓存注解</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheDemoApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CacheDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;项目启动成功...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span><span class="token comment">//Spring 框架自带的CacheManager(内存层面的缓存)</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * CachePut：将方法返回值放入缓存
     * value：缓存的名称，每个缓存名称下面可以有多个key
     * key：缓存的key
     */</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * CacheEvict：清理指定缓存
     * value：缓存的名称，每个缓存名称下面可以有多个key
     * key：缓存的key
     */</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;)</span>
    <span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span>
    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)</span>
    <span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span>
    <span class="token comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0].id&quot;)</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#result.id&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PutMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中
     * value：缓存的名称，每个缓存名称下面可以有多个key
     * key：缓存的key
     * condition：条件，满足条件时才缓存数据
     * unless：满足条件则不缓存
     */</span>
    <span class="token comment">//@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;,condition = &quot;#result != null&quot;)</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">,</span>unless <span class="token operator">=</span> <span class="token string">&quot;#result == null&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userCache&quot;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#user.id + &#39;_&#39; + #user.name&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-cache-整合redis-进行缓存" tabindex="-1"><a class="header-anchor" href="#spring-cache-整合redis-进行缓存" aria-hidden="true">#</a> Spring Cache 整合Redis 进行缓存</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107105942759.png" alt="image-20230107105942759"></p><p><strong>application.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token comment">#配置redis</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.199.152
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
   <span class="token comment">#配置spring cache</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
  	<span class="token key atrule">type</span><span class="token punctuation">:</span> redis
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> <span class="token number">1800000</span> <span class="token comment">#配置缓存存活时间(过期时间)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 <span class="token keyword">@author</span> EddieZhang
 @create 2023-01-01 16:18
 */</span>
<span class="token annotation punctuation">@org.springframework.boot.autoconfigure.SpringBootApplication</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.eddie.reggie.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ServletComponentScan</span><span class="token comment">//TODO 开启Servlet组件扫描 用来扫描@WebFilter的filter</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token comment">//TODO 开启事务管理</span>
<span class="token annotation punctuation">@EnableCaching</span><span class="token comment">//TODO 开启Cache的注解</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实体类</strong></p><p>所有涉及到缓存的实体类都要implements Serializable实现可序列化接口</p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107124705835.png" alt="image-20230107124705835"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 套餐管理
 @author EddieZhang
 @create 2023-01-03 18:12
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/setmeal&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetmealController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SetmealService</span> setmealService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SetmealDishService</span> setmealDishService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 添加套餐
     * <span class="token keyword">@param</span> <span class="token parameter">setmealDto</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;SetmealCache&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//清除cacheNames = &quot;SetmealCache&quot;这一类缓存中的所有数据</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        setmealService<span class="token punctuation">.</span><span class="token function">saveWithDish</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;新增套餐操作成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/page&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&gt;</span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//构造page构造器</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDto</span><span class="token punctuation">&gt;</span></span> setmealDtoPageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//处理Setmeal的pageInfo</span>
        <span class="token comment">//构建queryWrapper构造器</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加查询条件</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据updateTime进行降序排序</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getUpdateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//进行分页查询</span>
        setmealService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">,</span> setmealLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> pageInfo<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDto</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">SetmealDto</span> setmealDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetmealDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>category <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        setmealDto<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> setmealDto<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//处理SetmealDto的pageInfo</span>
        <span class="token comment">//进行对象copy 并且忽略掉records字段(不进行records字段的cp)</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">,</span> setmealDtoPageInfo<span class="token punctuation">,</span> <span class="token string">&quot;records&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealDtoPageInfo<span class="token punctuation">.</span><span class="token function">setRecords</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将SetmealDto的pageInfo返回</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmealDtoPageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 删除套餐
     * <span class="token keyword">@param</span> <span class="token parameter">ids</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@DeleteMapping</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;SetmealCache&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//清除cacheNames = &quot;SetmealCache&quot;这一类缓存中的所有数据</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        setmealService<span class="token punctuation">.</span><span class="token function">removeWithDish</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;套餐删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 停售套餐
     * <span class="token keyword">@param</span> <span class="token parameter">ids</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/status/0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">statusTo0</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//构造queryWrapper</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>ids <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据ids查询到setmeal集合 并使用stream()的形式将获取到的setmeal的status设置为0</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealList <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>setmealLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    item<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//进行数据库update操作 批量更新setmeal的status</span>
        setmealService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>setmealList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;停售套餐成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 起售套餐
     * <span class="token keyword">@param</span> <span class="token parameter">ids</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/status/1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">statusTo1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//构造queryWrapper</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>ids <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据ids查询到setmeal集合 并使用stream()的形式将获取到的setmeal的status设置为1</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealList <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>setmealLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    item<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//进行数据库update操作 批量更新setmeal的status</span>
        setmealService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>setmealList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;起售套餐成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据id进行SetmealDto查询
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDto</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SetmealDto</span> setmealDto <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">getByIdWithSetmealDish</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 修改SetmealDto
     * <span class="token keyword">@param</span> <span class="token parameter">setmealDto</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PutMapping</span>
    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;SetmealCache&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//清除cacheNames = &quot;SetmealCache&quot;这一类缓存中的所有数据</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">putSetmealDto</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        setmealService<span class="token punctuation">.</span><span class="token function">updateSetmealWishDish</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;修改套餐成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">//TODO Redis结合Spring Cache 进行缓存</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;SetmealCache&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#setmeal.categoryId + &#39;_&#39; + #setmeal.status&quot;</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">&quot;#result == null&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">/*
        cacheNames = &quot;SetmealCache&quot; 缓存的alias（类似于一类缓存）
        ☆key = &quot;#setmeal.categoryId + &#39;_&#39; + #setmeal.status&quot; 缓存的key 类似与一类缓存中的具体一份缓存
        unless = &quot;#result == null&quot; 缓存的条件
    */</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDto</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSetmealDtoById</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span> setmeal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查询setmealDish数据</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealDishLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">SetmealDish</span><span class="token operator">::</span><span class="token function">getSetmealId</span><span class="token punctuation">,</span> setmeal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishList <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>setmealDishLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//查询setmeal数据</span>
        <span class="token comment">//构建queryWrapper</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span> setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setmealLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Setmeal</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmeals <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>setmealLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDto</span><span class="token punctuation">&gt;</span></span> setmealDtoList <span class="token operator">=</span> setmeals<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">SetmealDto</span> setmealDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetmealDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    setmealDto<span class="token punctuation">.</span><span class="token function">setSetmealDishes</span><span class="token punctuation">(</span>setmealDishList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> setmealDto<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmealDtoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230107124830306.png" alt="image-20230107124830306"></p><h3 id="自定义spring-cache配置" tabindex="-1"><a class="header-anchor" href="#自定义spring-cache配置" aria-hidden="true">#</a> 自定义Spring Cache配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>eddie<span class="token punctuation">.</span>mall_goods<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 <span class="token keyword">@author</span> EddieZhang
 @create 2023-01-31 6:52 PM
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">/*
    @ConfigurationProperties(prefix = &quot;spring.cache&quot;)
    public class CacheProperties {
*/</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringCacheConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">customRedisCacheConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//获取默认的cache配置 后续的定制修改覆盖掉默认配置即可</span>
        <span class="token class-name">RedisCacheConfiguration</span> defaultCacheConfig <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定key的序列化</span>
        defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>
                <span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定value的序列化</span>
        defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>
                <span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redis <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定time-to-live: 配置缓存存活时间(过期时间) 等相关配置 从yaml配置文件中获取</span>
        <span class="token comment">//如果yaml文件中没有配置就使用defaultCacheConfig默认的配置</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//配置ddl缓存的存活时间</span>
            defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//配置key的前缀 没有配置就使用缓存的cacheNames作为前缀(推荐不配置 使用cacheNames作为前缀)</span>
            defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redis<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//TODO 是否缓存null值 防止缓存穿透</span>
            defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redis<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//是否使用key前缀</span>
            defaultCacheConfig <span class="token operator">=</span> defaultCacheConfig<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> defaultCacheConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230131193349472.png" alt="image-20230131193349472"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230131194645236.png" alt="image-20230131194645236"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20230131193247657.png" alt="image-20230131193247657"></p><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><table><thead><tr><th>@EnableCaching</th><th>开启注解 在启动类上使用</th></tr></thead><tbody><tr><td>@CacheConfig</td><td>类上使用<strong>指定整个类中的所有方法的cacheNames</strong> 类中的方法可以共享相同的缓存配置</td></tr><tr><td>@Cacheable</td><td>方法上使用 共用类上@CacheConfig指定的cacheNames <em>@Cacheable</em> will <strong>skip running the method</strong> <br>若<strong>缓存中没有</strong>则执行方法 <strong>将方法的结果缓存到redis中</strong> <strong>若查询到缓存中有 则不用执行方法 直接从缓存中获取结果</strong><br>指定参数<strong>cacheNames(分区名)</strong> <strong>key（分区下细分的key名）</strong> 以及 <strong>sync(读模式下的同步【本地锁】)</strong><br><strong>读模式</strong></td></tr><tr><td>@CacheEvict</td><td>清除缓存 可以指定<strong>allEntries()</strong> default false;为<strong>true</strong> 表明<strong>同时清除cacheNames分区下的所有key的缓存</strong><br>数据一致性之<strong>缓存失效方式</strong><br><strong>写模式</strong></td></tr><tr><td>@CachePut</td><td>更新缓存 <em>@CachePut</em> will <strong>actually run the method</strong> and then put its results in the cache 不影响方法执行的更新（重写）缓存<br>数据一致性之<strong>双写模式</strong><br><strong>写模式</strong></td></tr><tr><td>@Caching</td><td>can <strong>group multiple caching annotations</strong> with <em>@Caching</em>, and use it to implement our own customized caching logic <br><strong>组合多个缓存操作</strong> 形成一个缓存操作组<br><strong>写模式</strong></td></tr></tbody></table><p><strong>Spel表达式</strong></p><p>The SpEL expression evaluates against a dedicated context that provides the following meta-data: <strong>#root.method, #root.target</strong>, and <strong>#root.caches</strong> for references to the method, target object, and affected cache(s) respectively. Shortcuts for the method name (<strong>#root.methodName</strong>) and target class (<strong>#root.targetClass</strong>) are also available</p><h3 id="springcache总结" tabindex="-1"><a class="header-anchor" href="#springcache总结" aria-hidden="true">#</a> SpringCache总结</h3><p>读多写少读数据一致性要求不高的直接用SpringCache (读模式要求数据一致性的可以@Cacheable（sync = true）加本地同步锁),</p><p>写数据可以加读写锁/引入Canal（模拟MySQL从库 感知更新数据库），（分布式情况下高并发 数据一致性要求高的可以加分布式锁【Redisson】）</p><p>读多写多直接查数据库</p><p>根据自己的业务需求进行设计</p><h2 id="jsr303规范-注解方式-进行数据校验" tabindex="-1"><a class="header-anchor" href="#jsr303规范-注解方式-进行数据校验" aria-hidden="true">#</a> JSR303规范(注解方式)进行数据校验</h2><h2 id="dubbo" tabindex="-1"><a class="header-anchor" href="#dubbo" aria-hidden="true">#</a> &amp;Dubbo</h2><h3 id="spring-boot-整合-dubbo-zookeeper" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-dubbo-zookeeper" aria-hidden="true">#</a> Spring Boot 整合 Dubbo &amp; Zookeeper</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115121936603.png" alt="image-20221115121936603"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115121951179.png" alt="image-20221115121951179"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115121959552.png" alt="image-20221115121959552"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115122009262.png" alt="image-20221115122009262"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115122015949.png" alt="image-20221115122015949"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221115122025070.png" alt="image-20221115122025070"></p><h2 id="war-jar" tabindex="-1"><a class="header-anchor" href="#war-jar" aria-hidden="true">#</a> .war&amp;.jar</h2><h3 id="jar-打包java文件" tabindex="-1"><a class="header-anchor" href="#jar-打包java文件" aria-hidden="true">#</a> .jar：打包Java文件</h3><p><strong>内嵌有tomcat服务器 可以独立运行</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122131720576.png" alt="image-20221122131720576"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122132847108.png" alt="image-20221122132847108"></p><h4 id="命令行启动参数设置" tabindex="-1"><a class="header-anchor" href="#命令行启动参数设置" aria-hidden="true">#</a> 命令行启动参数设置</h4><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122142433911.png" alt="image-20221122142433911"></p><h3 id="war-打包web项目" tabindex="-1"><a class="header-anchor" href="#war-打包web项目" aria-hidden="true">#</a> .war：打包web项目</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122131705265.png" alt="image-20221122131705265"></p><p><strong>打包好的.war文件可以放到tomcat服务器中运行</strong></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122131745563.png" alt="image-20221122131745563"></p><h2 id="springboot项目运行方式" tabindex="-1"><a class="header-anchor" href="#springboot项目运行方式" aria-hidden="true">#</a> SpringBoot项目运行方式</h2><h3 id="在idea中直接运行springboot程序的main方法-开发阶段" tabindex="-1"><a class="header-anchor" href="#在idea中直接运行springboot程序的main方法-开发阶段" aria-hidden="true">#</a> 在IDEA中直接运行SpringBoot程序的main方法（开发阶段）</h3><h3 id="用maven将springboot项目打包为jar包-使用java命令-cmd-运行-上线部署阶段" tabindex="-1"><a class="header-anchor" href="#用maven将springboot项目打包为jar包-使用java命令-cmd-运行-上线部署阶段" aria-hidden="true">#</a> 用Maven将SpringBoot项目打包为jar包，使用Java命令（cmd）运行（上线部署阶段）</h3><h4 id="cmd中启动" tabindex="-1"><a class="header-anchor" href="#cmd中启动" aria-hidden="true">#</a> cmd中启动</h4><p>Java -jar springboot-xxx.jar</p><h4 id="在linux中部署启动" tabindex="-1"><a class="header-anchor" href="#在linux中部署启动" aria-hidden="true">#</a> 在Linux中部署启动</h4><p>封装命令为shell脚本在Linux中部署运行</p><p>1）：创建shell脚本文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vim run.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）：编写shell脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#！/bin/sh</span>
Java <span class="token parameter variable">-jar</span> 【.jar文件】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）：赋权限</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chomd 777 run.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）：启动shell脚本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./run.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="thymeleaf" tabindex="-1"><a class="header-anchor" href="#thymeleaf" aria-hidden="true">#</a> Thymeleaf</h2><p>https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html</p><p><strong>Thymeleaf：是使用Java开发的模板技术</strong>；在<strong>服务端运行</strong>。把处理后的数据发送给浏览器。</p><p>模板做视图层工作的。用来显示数据的。</p><p>基于HTML语言；应用在HTML中。</p><h3 id="springboot集成了thymeleaf" tabindex="-1"><a class="header-anchor" href="#springboot集成了thymeleaf" aria-hidden="true">#</a> SpringBoot集成了Thymeleaf</h3><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122151741138.png" alt="image-20221122151741138"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122151841470.png" alt="image-20221122151841470"></p><p><img src="https://eddie-typora-image.oss-cn-shenzhen.aliyuncs.com/typora-user-images/image-20221122151500438.png" alt="image-20221122151500438"></p><h2 id="spring-security-with-jwt" tabindex="-1"><a class="header-anchor" href="#spring-security-with-jwt" aria-hidden="true">#</a> Spring Security with JWT</h2><p><a href="read://https_www.toptal.com/?url=https%3A%2F%2Fwww.toptal.com%2Fspring%2Fspring-security-tutorial">Spring Security with JWT for REST API (toptal.com)</a></p><h2 id="spring-boot-注解" tabindex="-1"><a class="header-anchor" href="#spring-boot-注解" aria-hidden="true">#</a> Spring Boot 注解</h2><table><thead><tr><th>注解</th><th>用法</th></tr></thead><tbody><tr><td>==启动类上注解==</td><td></td></tr><tr><td>@SpringBootApplication</td><td></td></tr><tr><td>@ComponentScan</td><td></td></tr><tr><td>@MapperScan</td><td></td></tr><tr><td>@EnableTransactionManagement</td><td></td></tr><tr><td>@EnableCaching</td><td></td></tr><tr><td>@EnableDiscoveryClient</td><td></td></tr><tr><td>@EnableFeignClients</td><td></td></tr><tr><td>==配置相关注解==</td><td></td></tr><tr><td>@Configuration</td><td></td></tr><tr><td>@Bean</td><td></td></tr><tr><td>@PostConstruct</td><td></td></tr><tr><td>@EnableAutoConfiguration</td><td></td></tr><tr><td>@ConfigurationProperties(prefix=&quot;person&quot;)</td><td></td></tr><tr><td>@EnableConfigurationProperties</td><td></td></tr><tr><td>@Import(Config1.class)</td><td></td></tr><tr><td>@Value</td><td></td></tr><tr><td>==组件相关注解==</td><td></td></tr><tr><td>@Service</td><td></td></tr><tr><td>@Repository</td><td></td></tr><tr><td>@Component</td><td></td></tr><tr><td>@Order</td><td></td></tr><tr><td>@Autowired</td><td></td></tr><tr><td>@Qualifier(&quot;beanImplTwo&quot;)</td><td></td></tr><tr><td>@Resouce</td><td></td></tr><tr><td>==MVC相关注解==</td><td></td></tr><tr><td>@Controller</td><td></td></tr><tr><td>@RestController</td><td></td></tr><tr><td>@ResponseBody</td><td></td></tr><tr><td>@RequestMapping(&quot;/api2/copper&quot;)</td><td></td></tr><tr><td>@GetMapping</td><td></td></tr><tr><td>@PostMapping</td><td></td></tr><tr><td>@PutMapping</td><td></td></tr><tr><td>@DeleteMapping</td><td></td></tr><tr><td>@RequestParam</td><td></td></tr><tr><td>@RequestBody</td><td></td></tr><tr><td>@PathVariable</td><td></td></tr><tr><td>==全局异常处理相关注解==</td><td></td></tr><tr><td>@ControllerAdvice</td><td></td></tr><tr><td>@RestControllerAdvice</td><td></td></tr><tr><td>@ExceptionHandler（Exception.class）</td><td></td></tr><tr><td>==事务相关==</td><td></td></tr><tr><td>@Transactional</td><td></td></tr><tr><td>@Transactional(rollbackFor = Exception.class)</td><td></td></tr><tr><td>==实体类相关==</td><td></td></tr><tr><td>@Data</td><td></td></tr><tr><td>@AllArgsConstructor</td><td></td></tr><tr><td>@NoArgsConstructor</td><td></td></tr><tr><td>==mybatis以及（plus）相关==</td><td></td></tr><tr><td>@Mapper</td><td></td></tr><tr><td>@Param</td><td></td></tr><tr><td>@Select</td><td></td></tr><tr><td>@SelectKey</td><td></td></tr><tr><td>@Update</td><td></td></tr><tr><td>@Insert</td><td></td></tr><tr><td>@Delete</td><td></td></tr><tr><td>@Options</td><td></td></tr><tr><td>@ResultType</td><td></td></tr><tr><td>@ResultMap</td><td></td></tr><tr><td>@Results</td><td></td></tr><tr><td>@Result</td><td></td></tr><tr><td>@TableField</td><td></td></tr><tr><td>@TableId</td><td></td></tr><tr><td>@TableLogic</td><td></td></tr><tr><td>@TableName</td><td></td></tr><tr><td>@Transient</td><td></td></tr><tr><td>==创建切面相关注解==</td><td></td></tr><tr><td>@Aspect</td><td></td></tr><tr><td>@Pointcut</td><td></td></tr><tr><td>@Before</td><td></td></tr><tr><td>@After</td><td></td></tr><tr><td>@AfterReturning</td><td></td></tr><tr><td>@AfterThrowing</td><td></td></tr><tr><td>@Around</td><td></td></tr><tr><td>==按需加载相关注解==</td><td></td></tr><tr><td>@ConditionalOnExpression</td><td></td></tr><tr><td>@ConditionalOnProperty</td><td></td></tr><tr><td>@ConditionalOnClass</td><td></td></tr><tr><td>@ConditionalOnMisssingClass({ApplicationManager.class})</td><td></td></tr><tr><td>@ConditionOnMissingBean(name = &quot;example&quot;)</td><td></td></tr></tbody></table>`,82);function f(w,q){const t=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("自动映射 /"),n("a",r,[s("webjars"),e(t)]),s("/**")]),d,n("p",null,[s("访问地址："),n("a",k,[s("http://localhost:8080/webjars/"),m,e(t)]),s(" 后面地址要按照依赖里面的包路径")]),g,n("p",null,[n("a",v,[s("Spring Boot"),e(t)])]),h,n("p",null,[n("a",b,[s("A Guide To Caching in Spring | Baeldung"),e(t)])]),y])}const S=p(l,[["render",f],["__file","SpringBoot.html.vue"]]);export{S as default};
